// <auto-generated />
using System;
using System.Net.Http;
using System.Collections.Generic;
using Refit.Tests.RefitInternalGenerated;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#pragma warning disable
namespace Refit.Tests.RefitInternalGenerated
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {

        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}
#pragma warning restore

#pragma warning disable CS8632 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.
#pragma warning disable CS8669 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.
namespace Refit.Tests
{
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.CodeAnalysis;
    using global::Microsoft.CodeAnalysis.CSharp;
    using global::Microsoft.CodeAnalysis.CSharp.Syntax;
    using global::Refit;
    using global::Refit.Generator;
    using global::Xunit;
    using Task =  global::System.Threading.Tasks.Task;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIAmARefitInterfaceButNobodyUsesMe : IAmARefitInterfaceButNobodyUsesMe
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIAmARefitInterfaceButNobodyUsesMe(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_294c7beec3ae4c2ea2f551dd9f2ceac8 = new Type[] {  };

        /// <inheritdoc />
        Task IAmARefitInterfaceButNobodyUsesMe.RefitMethod()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("RefitMethod", ArgumentTypes_294c7beec3ae4c2ea2f551dd9f2ceac8);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_7e1d182ae429428bbb27c49383b8fbf9 = new Type[] {  };

        /// <inheritdoc />
        Task IAmARefitInterfaceButNobodyUsesMe.AnotherRefitMethod()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("AnotherRefitMethod", ArgumentTypes_7e1d182ae429428bbb27c49383b8fbf9);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_5c1e302ec72d4423b80812ba9bc69632 = new Type[] {  };

        /// <inheritdoc />
        Task IAmARefitInterfaceButNobodyUsesMe.NoConstantsAllowed()
        {
            throw new NotImplementedException("Either this method has no Refit HTTP method attribute or you've used something other than a string literal for the 'path' argument.");
        }

        private static readonly Type[] ArgumentTypes_2cbc0427569d4f7884b2dfbee55fbce1 = new Type[] {  };

        /// <inheritdoc />
        Task IAmARefitInterfaceButNobodyUsesMe.SpacesShouldntBreakMe()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("SpacesShouldntBreakMe", ArgumentTypes_2cbc0427569d4f7884b2dfbee55fbce1);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_11bea462e8604f558a0c4795e0cfe583 = new Type[] { typeof(int), typeof(string), typeof(float) };

        /// <inheritdoc />
        Task IAmARefitInterfaceButNobodyUsesMe.ReservedWordsForParameterNames(int @int, string @string, float @long)
        {
            var arguments = new object[] { @int, @string, @long };
            var func = requestBuilder.BuildRestResultFuncForMethod("ReservedWordsForParameterNames", ArgumentTypes_11bea462e8604f558a0c4795e0cfe583);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIAmHalfRefit : IAmHalfRefit
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIAmHalfRefit(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_246099c598864d098f368a9d2b141cd0 = new Type[] {  };

        /// <inheritdoc />
        Task IAmHalfRefit.Post()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Post", ArgumentTypes_246099c598864d098f368a9d2b141cd0);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_9efebcb322ae46ee880c9274c91e713f = new Type[] {  };

        /// <inheritdoc />
        Task IAmHalfRefit.Get()
        {
            throw new NotImplementedException("Either this method has no Refit HTTP method attribute or you've used something other than a string literal for the 'path' argument.");
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;
    using static global::System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIAmInterface : IAmInterface
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIAmInterface(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_ae79f7eb658e4498911be41f0e7b73c9 = new Type[] {  };

        /// <inheritdoc />
        Task<string> IAmInterface.Pang()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Pang", ArgumentTypes_ae79f7eb658e4498911be41f0e7b73c9);
            return (Task<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_aea84e7985454fb7ac240c0623728900 = new Type[] {  };

        /// <inheritdoc />
        Task<string> IAmInterfaceB.Pong()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Pong", ArgumentTypes_aea84e7985454fb7ac240c0623728900);
            return (Task<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_71aaacdbf10442ef8f8884066a2800ed = new Type[] {  };

        /// <inheritdoc />
        Task<string> IAmInterfaceD.Test()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Test", ArgumentTypes_71aaacdbf10442ef8f8884066a2800ed);
            return (Task<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_e250d137cf2b41aebbdd66f580ecc4e2 = new Type[] {  };

        /// <inheritdoc />
        Task<string> IAmInterfaceA.Ping()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Ping", ArgumentTypes_e250d137cf2b41aebbdd66f580ecc4e2);
            return (Task<string>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;
    using static global::System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIAmInterfaceA : IAmInterfaceA
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIAmInterfaceA(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_70c1dbcde7a144fab5e34770b582cd70 = new Type[] {  };

        /// <inheritdoc />
        Task<string> IAmInterfaceA.Ping()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Ping", ArgumentTypes_70c1dbcde7a144fab5e34770b582cd70);
            return (Task<string>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;
    using static global::System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIAmInterfaceB : IAmInterfaceB
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIAmInterfaceB(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_972cf714ec0449debc8b850320e77796 = new Type[] {  };

        /// <inheritdoc />
        Task<string> IAmInterfaceB.Pong()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Pong", ArgumentTypes_972cf714ec0449debc8b850320e77796);
            return (Task<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_1985886340014917ac67199a5532f642 = new Type[] {  };

        /// <inheritdoc />
        Task<string> IAmInterfaceD.Test()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Test", ArgumentTypes_1985886340014917ac67199a5532f642);
            return (Task<string>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;
    using static global::System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIAmInterfaceC : IAmInterfaceC
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIAmInterfaceC(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_56608d8e192b4d68a2a1cd4cd922d351 = new Type[] {  };

        /// <inheritdoc />
        Task<string> IAmInterfaceC.Pang()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Pang", ArgumentTypes_56608d8e192b4d68a2a1cd4cd922d351);
            return (Task<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_27e1d521019046148a0027ad81074cc1 = new Type[] {  };

        /// <inheritdoc />
        Task<string> IAmInterfaceB.Pong()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Pong", ArgumentTypes_27e1d521019046148a0027ad81074cc1);
            return (Task<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_7bba69f3179d4f6f994eaa1f56e8ab4c = new Type[] {  };

        /// <inheritdoc />
        Task<string> IAmInterfaceD.Test()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Test", ArgumentTypes_7bba69f3179d4f6f994eaa1f56e8ab4c);
            return (Task<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_1d960319b7e842d8ba1d3c3af98c79d4 = new Type[] {  };

        /// <inheritdoc />
        Task<string> IAmInterfaceA.Ping()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Ping", ArgumentTypes_1d960319b7e842d8ba1d3c3af98c79d4);
            return (Task<string>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;
    using static global::System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIAmInterfaceD : IAmInterfaceD
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIAmInterfaceD(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_028b918e4db94eb1b81abdfe1c3c53cc = new Type[] {  };

        /// <inheritdoc />
        Task<string> IAmInterfaceD.Test()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Test", ArgumentTypes_028b918e4db94eb1b81abdfe1c3c53cc);
            return (Task<string>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIApiBindPathToObject : IApiBindPathToObject
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIApiBindPathToObject(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_97e3e61e76e440789d5093e7b93da5f9 = new Type[] { typeof(PathBoundObject) };

        /// <inheritdoc />
        Task IApiBindPathToObject.GetFooBars(PathBoundObject request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFooBars", ArgumentTypes_97e3e61e76e440789d5093e7b93da5f9);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_a59bde75544042239980fd5468640db6 = new Type[] { typeof(PathBoundObject) };

        /// <inheritdoc />
        Task IApiBindPathToObject.GetFooBarsWithDifferentCasing(PathBoundObject requestParams)
        {
            var arguments = new object[] { requestParams };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFooBarsWithDifferentCasing", ArgumentTypes_a59bde75544042239980fd5468640db6);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_6d949a2336e0440e8e28c34fa7701f27 = new Type[] { typeof(string), typeof(PathBoundObject) };

        /// <inheritdoc />
        Task IApiBindPathToObject.GetBarsByFoo(string id, PathBoundObject request)
        {
            var arguments = new object[] { id, request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetBarsByFoo", ArgumentTypes_6d949a2336e0440e8e28c34fa7701f27);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_d6ab9111652e4b5bb21ea0c484b812ff = new Type[] { typeof(PathBoundObject), typeof(string) };

        /// <inheritdoc />
        Task IApiBindPathToObject.GetFooBars(PathBoundObject request, string someProperty)
        {
            var arguments = new object[] { request, someProperty };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFooBars", ArgumentTypes_d6ab9111652e4b5bb21ea0c484b812ff);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_40697492eb7d42909346b14cda09b5b7 = new Type[] { typeof(PathBoundObject) };

        /// <inheritdoc />
        Task IApiBindPathToObject.GetBarsByFoo(PathBoundObject request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetBarsByFoo", ArgumentTypes_40697492eb7d42909346b14cda09b5b7);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_a7964ea160c446c5b209ae6fcadebc44 = new Type[] { typeof(PathBoundObjectWithQueryFormat) };

        /// <inheritdoc />
        Task IApiBindPathToObject.GetBarsWithCustomQueryFormat(PathBoundObjectWithQueryFormat request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetBarsWithCustomQueryFormat", ArgumentTypes_a7964ea160c446c5b209ae6fcadebc44);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_6174d733cdff4b81b3bf4713e20e26d4 = new Type[] { typeof(PathBoundDerivedObject) };

        /// <inheritdoc />
        Task IApiBindPathToObject.GetFooBarsDerived(PathBoundDerivedObject request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFooBarsDerived", ArgumentTypes_6174d733cdff4b81b3bf4713e20e26d4);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_ecd201eeb1804392a65f1fdfa85885fa = new Type[] { typeof(PathBoundList) };

        /// <inheritdoc />
        Task IApiBindPathToObject.GetFoos(PathBoundList request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFoos", ArgumentTypes_ecd201eeb1804392a65f1fdfa85885fa);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_6e24e1b6674b453d9fde5f5f8d82977a = new Type[] { typeof(List<int>) };

        /// <inheritdoc />
        Task IApiBindPathToObject.GetFoos2(List<int> Values)
        {
            var arguments = new object[] { Values };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFoos2", ArgumentTypes_6e24e1b6674b453d9fde5f5f8d82977a);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_9e9447f11d4242478c5c7328f30d54d1 = new Type[] { typeof(PathBoundObject), typeof(object) };

        /// <inheritdoc />
        Task IApiBindPathToObject.PostFooBar(PathBoundObject request, object someObject)
        {
            var arguments = new object[] { request, someObject };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostFooBar", ArgumentTypes_9e9447f11d4242478c5c7328f30d54d1);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_156f9a29068f4c0db65436448e567391 = new Type[] { typeof(PathBoundObjectWithQuery) };

        /// <inheritdoc />
        Task IApiBindPathToObject.GetFooBars(PathBoundObjectWithQuery request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFooBars", ArgumentTypes_156f9a29068f4c0db65436448e567391);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_02ed75d988bc4d929900f5a25383cb60 = new Type[] { typeof(PathBoundObject), typeof(ModelObject) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IApiBindPathToObject.PostFooBar(PathBoundObject request, ModelObject someQueryParams)
        {
            var arguments = new object[] { request, someQueryParams };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostFooBar", ArgumentTypes_02ed75d988bc4d929900f5a25383cb60);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_101184cad9734b12a877ba24f0f938df = new Type[] { typeof(PathBoundObject), typeof(ModelObject), typeof(StreamPart) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IApiBindPathToObject.PostFooBarStreamPart(PathBoundObject request, ModelObject someQueryParams, StreamPart stream)
        {
            var arguments = new object[] { request, someQueryParams, stream };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostFooBarStreamPart", ArgumentTypes_101184cad9734b12a877ba24f0f938df);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_5244145622d7493ab2938a8c3ce22bbf = new Type[] { typeof(PathBoundObject), typeof(StreamPart) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IApiBindPathToObject.PostFooBarStreamPart(PathBoundObject request, StreamPart stream)
        {
            var arguments = new object[] { request, stream };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostFooBarStreamPart", ArgumentTypes_5244145622d7493ab2938a8c3ce22bbf);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_f5923ecb0afa4c36a6d77564c22a4542 = new Type[] { typeof(PathBoundObjectWithQuery), typeof(StreamPart) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IApiBindPathToObject.PostFooBarStreamPart(PathBoundObjectWithQuery request, StreamPart stream)
        {
            var arguments = new object[] { request, stream };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostFooBarStreamPart", ArgumentTypes_f5923ecb0afa4c36a6d77564c22a4542);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIApiWithDecimal : IApiWithDecimal
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIApiWithDecimal(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_60e898143f604e54ac71cda9adb0393b = new Type[] { typeof(decimal) };

        /// <inheritdoc />
        Task<string> IApiWithDecimal.GetWithDecimal(decimal value)
        {
            var arguments = new object[] { value };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetWithDecimal", ArgumentTypes_60e898143f604e54ac71cda9adb0393b);
            return (Task<string>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIBodylessApi : IBodylessApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIBodylessApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_1e65017d5981469b89f423f3dcafb423 = new Type[] {  };

        /// <inheritdoc />
        Task IBodylessApi.Post()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Post", ArgumentTypes_1e65017d5981469b89f423f3dcafb423);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_6ee706b775304db4ab55902380c8be2f = new Type[] {  };

        /// <inheritdoc />
        Task IBodylessApi.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_6ee706b775304db4ab55902380c8be2f);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_c3feb021fae14f5c8c1dc2238d8a0ecc = new Type[] {  };

        /// <inheritdoc />
        Task IBodylessApi.Head()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Head", ArgumentTypes_c3feb021fae14f5c8c1dc2238d8a0ecc);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.CodeAnalysis;
    using global::Microsoft.CodeAnalysis.CSharp;
    using global::Microsoft.CodeAnalysis.CSharp.Syntax;
    using global::Refit;
    using global::Refit.Generator;
    using global::Xunit;
    using Task =  global::System.Threading.Tasks.Task;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIBoringCrudApi<T, TKey>
     : IBoringCrudApi<T, TKey>
        where T : class

    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIBoringCrudApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_c4eebfa0b051453390f293a0c42c4c99 = new Type[] { typeof(T) };

        /// <inheritdoc />
        Task<T> IBoringCrudApi<T, TKey>.Create(T paylod)
        {
            var arguments = new object[] { paylod };
            var func = requestBuilder.BuildRestResultFuncForMethod("Create", ArgumentTypes_c4eebfa0b051453390f293a0c42c4c99);
            return (Task<T>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_62b55579eb314eb788ddd5eabb8abd2b = new Type[] {  };

        /// <inheritdoc />
        Task<List<T>> IBoringCrudApi<T, TKey>.ReadAll()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadAll", ArgumentTypes_62b55579eb314eb788ddd5eabb8abd2b);
            return (Task<List<T>>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_3fc10bc9079148b28e2c684ab769f3e1 = new Type[] { typeof(TKey) };

        /// <inheritdoc />
        Task<T> IBoringCrudApi<T, TKey>.ReadOne(TKey key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadOne", ArgumentTypes_3fc10bc9079148b28e2c684ab769f3e1);
            return (Task<T>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_130fa10a15f948d3a4ec536b8159648c = new Type[] { typeof(TKey), typeof(T) };

        /// <inheritdoc />
        Task IBoringCrudApi<T, TKey>.Update(TKey key, T payload)
        {
            var arguments = new object[] { key, payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", ArgumentTypes_130fa10a15f948d3a4ec536b8159648c);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_8f6b7e81e39d482aadace7f60f2623ec = new Type[] { typeof(TKey) };

        /// <inheritdoc />
        Task IBoringCrudApi<T, TKey>.Delete(TKey key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", ArgumentTypes_8f6b7e81e39d482aadace7f60f2623ec);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIBrokenWebApi : IBrokenWebApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIBrokenWebApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_30826e9a64d04fe782fd04dd4b744d99 = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task<bool> IBrokenWebApi.PostAValue(string derp)
        {
            var arguments = new object[] { derp };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostAValue", ArgumentTypes_30826e9a64d04fe782fd04dd4b744d99);
            return (Task<bool>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedICustomNullableReferenceService : ICustomNullableReferenceService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedICustomNullableReferenceService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_15f4ba1fb58d40179652b64d4d45bd19 = new Type[] {  };

        /// <inheritdoc />
        CustomReferenceType? ICustomNullableReferenceService.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_15f4ba1fb58d40179652b64d4d45bd19);
            return (CustomReferenceType?)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedICustomNullableValueService : ICustomNullableValueService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedICustomNullableValueService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_d935b340a475426085eaa39e5022625c = new Type[] {  };

        /// <inheritdoc />
        CustomValueType? ICustomNullableValueService.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_d935b340a475426085eaa39e5022625c);
            return (CustomValueType?)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedICustomReferenceAndValueParametersService : ICustomReferenceAndValueParametersService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedICustomReferenceAndValueParametersService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_eaa7c011160d49e884007030aa4831ec = new Type[] { ToNullable(typeof(CustomReferenceType)), ToNullable(typeof(CustomValueType)) };

        /// <inheritdoc />
        Task ICustomReferenceAndValueParametersService.Get(CustomReferenceType? reference, CustomValueType? value)
        {
            var arguments = new object[] { reference, value };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_eaa7c011160d49e884007030aa4831ec);
            return (Task)func(Client, arguments);
        }

        private static Type ToNullable(Type type) => !type.IsValueType ? type : typeof(Nullable<>).MakeGenericType(type);
    }
}

namespace Refit.Tests
{
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;
    using global::Refit;
    using static global::System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIDataApiA : IDataApiA
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIDataApiA(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_7443f859105a4b72807cb5e485df66f6 = new Type[] {  };

        /// <inheritdoc />
        Task IDataApiA.PingA()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("PingA", ArgumentTypes_7443f859105a4b72807cb5e485df66f6);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_6906dea5934e4628b01800510d4069a9 = new Type[] { typeof(DataEntity) };

        /// <inheritdoc />
        Task<DataEntity> IDataCrudApi<DataEntity>.Copy(DataEntity payload)
        {
            var arguments = new object[] { payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Copy", ArgumentTypes_6906dea5934e4628b01800510d4069a9);
            return (Task<DataEntity>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_21d82fc69d7242009ac9f77ec785cd81 = new Type[] { typeof(DataEntity) };

        /// <inheritdoc />
        Task<DataEntity> IDataCrudApi<DataEntity, long>.Create(DataEntity payload)
        {
            var arguments = new object[] { payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Create", ArgumentTypes_21d82fc69d7242009ac9f77ec785cd81);
            return (Task<DataEntity>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_9b2563d045404470a02ba7528869fa48 = new Type[] {  };

        /// <inheritdoc />
        Task<List<DataEntity>> IDataCrudApi<DataEntity, long>.ReadAll()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadAll", ArgumentTypes_9b2563d045404470a02ba7528869fa48);
            return (Task<List<DataEntity>>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_2ec03741cea74983a94786367f0ab5ac = new Type[] { typeof(long) };

        /// <inheritdoc />
        Task<DataEntity> IDataCrudApi<DataEntity, long>.ReadOne(long key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadOne", ArgumentTypes_2ec03741cea74983a94786367f0ab5ac);
            return (Task<DataEntity>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_bc885e8308b74d418decd5d9cd9e49ce = new Type[] { typeof(long), typeof(DataEntity) };

        /// <inheritdoc />
        Task IDataCrudApi<DataEntity, long>.Update(long key, DataEntity payload)
        {
            var arguments = new object[] { key, payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", ArgumentTypes_bc885e8308b74d418decd5d9cd9e49ce);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_f0c5a7d602d74469a2822f04d50902ef = new Type[] { typeof(long) };

        /// <inheritdoc />
        Task IDataCrudApi<DataEntity, long>.Delete(long key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", ArgumentTypes_f0c5a7d602d74469a2822f04d50902ef);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;
    using global::Refit;
    using static global::System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIDataApiB : IDataApiB
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIDataApiB(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_7dcab60e55bf4898bed92507f27c44ec = new Type[] {  };

        /// <inheritdoc />
        Task IDataApiB.PingB()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("PingB", ArgumentTypes_7dcab60e55bf4898bed92507f27c44ec);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_7fb0696d08b9421da6cf4de1d411f102 = new Type[] { typeof(DataEntity) };

        /// <inheritdoc />
        Task<DataEntity> IDataCrudApi<DataEntity, int>.Create(DataEntity payload)
        {
            var arguments = new object[] { payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Create", ArgumentTypes_7fb0696d08b9421da6cf4de1d411f102);
            return (Task<DataEntity>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_a655abb96e744b18ab67b5bb6494e341 = new Type[] {  };

        /// <inheritdoc />
        Task<List<DataEntity>> IDataCrudApi<DataEntity, int>.ReadAll()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadAll", ArgumentTypes_a655abb96e744b18ab67b5bb6494e341);
            return (Task<List<DataEntity>>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_b8a2eb86f0e54af48d4a7907ee0ff1b8 = new Type[] { typeof(int) };

        /// <inheritdoc />
        Task<DataEntity> IDataCrudApi<DataEntity, int>.ReadOne(int key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadOne", ArgumentTypes_b8a2eb86f0e54af48d4a7907ee0ff1b8);
            return (Task<DataEntity>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_87135550a591433585ec5c4484f11a92 = new Type[] { typeof(int), typeof(DataEntity) };

        /// <inheritdoc />
        Task IDataCrudApi<DataEntity, int>.Update(int key, DataEntity payload)
        {
            var arguments = new object[] { key, payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", ArgumentTypes_87135550a591433585ec5c4484f11a92);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_63ca47c245b4423a95610ac4a9e274de = new Type[] { typeof(int) };

        /// <inheritdoc />
        Task IDataCrudApi<DataEntity, int>.Delete(int key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", ArgumentTypes_63ca47c245b4423a95610ac4a9e274de);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;
    using global::Refit;
    using static global::System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIDataCrudApi<T>
     : IDataCrudApi<T>
        where T : class

    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIDataCrudApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_a074e69f312342d5afe0c4201c9b7da4 = new Type[] { typeof(T) };

        /// <inheritdoc />
        Task<T> IDataCrudApi<T>.Copy(T payload)
        {
            var arguments = new object[] { payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Copy", ArgumentTypes_a074e69f312342d5afe0c4201c9b7da4);
            return (Task<T>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_8972e5c9755e46c9bfe7c9b77fbd58b8 = new Type[] { typeof(T) };

        /// <inheritdoc />
        Task<T> IDataCrudApi<T, long>.Create(T payload)
        {
            var arguments = new object[] { payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Create", ArgumentTypes_8972e5c9755e46c9bfe7c9b77fbd58b8);
            return (Task<T>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_a99e7462a6ae49bcb13210aaab647eb1 = new Type[] {  };

        /// <inheritdoc />
        Task<List<T>> IDataCrudApi<T, long>.ReadAll()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadAll", ArgumentTypes_a99e7462a6ae49bcb13210aaab647eb1);
            return (Task<List<T>>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_959adb09159f4f2386615f7649a86e1d = new Type[] { typeof(long) };

        /// <inheritdoc />
        Task<T> IDataCrudApi<T, long>.ReadOne(long key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadOne", ArgumentTypes_959adb09159f4f2386615f7649a86e1d);
            return (Task<T>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_9e00a26393504a5ea5a202d42d8ff954 = new Type[] { typeof(long), typeof(T) };

        /// <inheritdoc />
        Task IDataCrudApi<T, long>.Update(long key, T payload)
        {
            var arguments = new object[] { key, payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", ArgumentTypes_9e00a26393504a5ea5a202d42d8ff954);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_dea250aa28bb44c293e80ed8a7d7537d = new Type[] { typeof(long) };

        /// <inheritdoc />
        Task IDataCrudApi<T, long>.Delete(long key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", ArgumentTypes_dea250aa28bb44c293e80ed8a7d7537d);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;
    using global::Refit;
    using static global::System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIDataCrudApi<T, TKey>
     : IDataCrudApi<T, TKey>
        where T : class

    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIDataCrudApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_33e0f5bbee2841b9b1597d04fa8daff6 = new Type[] { typeof(T) };

        /// <inheritdoc />
        Task<T> IDataCrudApi<T, TKey>.Create(T payload)
        {
            var arguments = new object[] { payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Create", ArgumentTypes_33e0f5bbee2841b9b1597d04fa8daff6);
            return (Task<T>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_28737e6e0eda453a908b51f986d1471e = new Type[] {  };

        /// <inheritdoc />
        Task<List<T>> IDataCrudApi<T, TKey>.ReadAll()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadAll", ArgumentTypes_28737e6e0eda453a908b51f986d1471e);
            return (Task<List<T>>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_8aa88d642a604f55ada6225fecf2e635 = new Type[] { typeof(TKey) };

        /// <inheritdoc />
        Task<T> IDataCrudApi<T, TKey>.ReadOne(TKey key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadOne", ArgumentTypes_8aa88d642a604f55ada6225fecf2e635);
            return (Task<T>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_a0965b05779d4f9b925fe6bf38027b28 = new Type[] { typeof(TKey), typeof(T) };

        /// <inheritdoc />
        Task IDataCrudApi<T, TKey>.Update(TKey key, T payload)
        {
            var arguments = new object[] { key, payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", ArgumentTypes_a0965b05779d4f9b925fe6bf38027b28);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_f60b29bcec6c48f6803a5e4a6b0bbb83 = new Type[] { typeof(TKey) };

        /// <inheritdoc />
        Task IDataCrudApi<T, TKey>.Delete(TKey key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", ArgumentTypes_f60b29bcec6c48f6803a5e4a6b0bbb83);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIGenericNullableReferenceParameterService : IGenericNullableReferenceParameterService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIGenericNullableReferenceParameterService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_2159071202184c619f7c1faaec73123b = new Type[] { ToNullable(typeof(System.Collections.Generic.List<string>)) };

        /// <inheritdoc />
        Task IGenericNullableReferenceParameterService.Get(System.Collections.Generic.List<string>? reference)
        {
            var arguments = new object[] { reference };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_2159071202184c619f7c1faaec73123b);
            return (Task)func(Client, arguments);
        }

        private static Type ToNullable(Type type) => !type.IsValueType ? type : typeof(Nullable<>).MakeGenericType(type);
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIGenericNullableReferenceService : IGenericNullableReferenceService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIGenericNullableReferenceService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_2b16524e85974ec5aab4b08e4b8a51dd = new Type[] {  };

        /// <inheritdoc />
        Task<string>? IGenericNullableReferenceService.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_2b16524e85974ec5aab4b08e4b8a51dd);
            return (Task<string>?)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIGenericNullableValueService : IGenericNullableValueService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIGenericNullableValueService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_cb0a80401eb440b38347af2c736ac446 = new Type[] {  };

        /// <inheritdoc />
        ValueTask<int>? IGenericNullableValueService.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_cb0a80401eb440b38347af2c736ac446);
            return (ValueTask<int>?)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIGenericNullableWithNullableReferenceParameterService : IGenericNullableWithNullableReferenceParameterService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIGenericNullableWithNullableReferenceParameterService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_7f604d9e0f5a4ab98b37f5b9d02487fa = new Type[] { ToNullable(typeof(System.Collections.Generic.List<string?>)) };

        /// <inheritdoc />
        Task IGenericNullableWithNullableReferenceParameterService.Get(System.Collections.Generic.List<string?>? reference)
        {
            var arguments = new object[] { reference };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_7f604d9e0f5a4ab98b37f5b9d02487fa);
            return (Task)func(Client, arguments);
        }

        private static Type ToNullable(Type type) => !type.IsValueType ? type : typeof(Nullable<>).MakeGenericType(type);
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIGenericNullableWithNullableReferenceService : IGenericNullableWithNullableReferenceService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIGenericNullableWithNullableReferenceService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_c98509685b8b4224a81837db1de99ce1 = new Type[] {  };

        /// <inheritdoc />
        Task<string?>? IGenericNullableWithNullableReferenceService.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_c98509685b8b4224a81837db1de99ce1);
            return (Task<string?>?)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIGenericNullableWithNullableValueService : IGenericNullableWithNullableValueService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIGenericNullableWithNullableValueService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_97a9579518504bc9bd68fccfe472e907 = new Type[] {  };

        /// <inheritdoc />
        ValueTask<int?>? IGenericNullableWithNullableValueService.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_97a9579518504bc9bd68fccfe472e907);
            return (ValueTask<int?>?)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIGenericWithNullableReferenceParameterService : IGenericWithNullableReferenceParameterService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIGenericWithNullableReferenceParameterService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_b1cd681449dc4f2aabb76eaad58d741c = new Type[] { typeof(System.Collections.Generic.List<string?>) };

        /// <inheritdoc />
        Task IGenericWithNullableReferenceParameterService.Get(System.Collections.Generic.List<string?> reference)
        {
            var arguments = new object[] { reference };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_b1cd681449dc4f2aabb76eaad58d741c);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIGenericWithNullableValueService : IGenericWithNullableValueService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIGenericWithNullableValueService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_9c1e41b9f2ce49dc80d0d8edd473aab3 = new Type[] {  };

        /// <inheritdoc />
        Task<int?> IGenericWithNullableValueService.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_9c1e41b9f2ce49dc80d0d8edd473aab3);
            return (Task<int?>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIGenericWithResultService : IGenericWithResultService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIGenericWithResultService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_0f5e2def14944a298b4aad7a29549d46 = new Type[] {  };

        /// <inheritdoc />
        Task<string?> IGenericWithResultService.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_0f5e2def14944a298b4aad7a29549d46);
            return (Task<string?>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Net.Http;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Refit;
    using static global::System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIGitHubApi : IGitHubApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIGitHubApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_23e53669c26447f18ed714a3cbd26ea7 = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task<User> IGitHubApi.GetUser(string userName)
        {
            var arguments = new object[] { userName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUser", ArgumentTypes_23e53669c26447f18ed714a3cbd26ea7);
            return (Task<User>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_98d8c00512894d0c89d9f8e3e89f6874 = new Type[] { typeof(string) };

        /// <inheritdoc />
        IObservable<User> IGitHubApi.GetUserObservable(string userName)
        {
            var arguments = new object[] { userName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUserObservable", ArgumentTypes_98d8c00512894d0c89d9f8e3e89f6874);
            return (IObservable<User>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_af1e060037bb41b2a5960c9aacd017a3 = new Type[] { typeof(string) };

        /// <inheritdoc />
        IObservable<User> IGitHubApi.GetUserCamelCase(string userName)
        {
            var arguments = new object[] { userName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUserCamelCase", ArgumentTypes_af1e060037bb41b2a5960c9aacd017a3);
            return (IObservable<User>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_4aab89d36342433caef51d05ed1b37af = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task<List<User>> IGitHubApi.GetOrgMembers(string orgName)
        {
            var arguments = new object[] { orgName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetOrgMembers", ArgumentTypes_4aab89d36342433caef51d05ed1b37af);
            return (Task<List<User>>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_5e81b1cfa13341489ff88d3529722bff = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task<UserSearchResult> IGitHubApi.FindUsers(string q)
        {
            var arguments = new object[] { q };
            var func = requestBuilder.BuildRestResultFuncForMethod("FindUsers", ArgumentTypes_5e81b1cfa13341489ff88d3529722bff);
            return (Task<UserSearchResult>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_466ba850f8ce45a4b06e4743937694a7 = new Type[] {  };

        /// <inheritdoc />
        Task<HttpResponseMessage> IGitHubApi.GetIndex()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("GetIndex", ArgumentTypes_466ba850f8ce45a4b06e4743937694a7);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_8eea8a9bf8ba4ae1aed3d26ce2f4b5c3 = new Type[] {  };

        /// <inheritdoc />
        IObservable<string> IGitHubApi.GetIndexObservable()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("GetIndexObservable", ArgumentTypes_8eea8a9bf8ba4ae1aed3d26ce2f4b5c3);
            return (IObservable<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_2c852723b8664796ac762a077e2f54ae = new Type[] {  };

        /// <inheritdoc />
        Task<User> IGitHubApi.NothingToSeeHere()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("NothingToSeeHere", ArgumentTypes_2c852723b8664796ac762a077e2f54ae);
            return (Task<User>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_042421f12c2c49a89cd83af9a6c54298 = new Type[] {  };

        /// <inheritdoc />
        Task<ApiResponse<User>> IGitHubApi.NothingToSeeHereWithMetadata()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("NothingToSeeHereWithMetadata", ArgumentTypes_042421f12c2c49a89cd83af9a6c54298);
            return (Task<ApiResponse<User>>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_bc66e008ada24a34b0e313358a4a5f83 = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task<ApiResponse<User>> IGitHubApi.GetUserWithMetadata(string userName)
        {
            var arguments = new object[] { userName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUserWithMetadata", ArgumentTypes_bc66e008ada24a34b0e313358a4a5f83);
            return (Task<ApiResponse<User>>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_fc144a3fad4f4d69bc9a42c133be4428 = new Type[] { typeof(string) };

        /// <inheritdoc />
        IObservable<ApiResponse<User>> IGitHubApi.GetUserObservableWithMetadata(string userName)
        {
            var arguments = new object[] { userName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUserObservableWithMetadata", ArgumentTypes_fc144a3fad4f4d69bc9a42c133be4428);
            return (IObservable<ApiResponse<User>>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_73a5041b17c44f7dac77e5b9716299a7 = new Type[] { typeof(User) };

        /// <inheritdoc />
        Task<User> IGitHubApi.CreateUser(User user)
        {
            var arguments = new object[] { user };
            var func = requestBuilder.BuildRestResultFuncForMethod("CreateUser", ArgumentTypes_73a5041b17c44f7dac77e5b9716299a7);
            return (Task<User>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_300c5e3ad8c94bf98349348b84a983c1 = new Type[] { typeof(User) };

        /// <inheritdoc />
        Task<ApiResponse<User>> IGitHubApi.CreateUserWithMetadata(User user)
        {
            var arguments = new object[] { user };
            var func = requestBuilder.BuildRestResultFuncForMethod("CreateUserWithMetadata", ArgumentTypes_300c5e3ad8c94bf98349348b84a983c1);
            return (Task<ApiResponse<User>>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIHttpBinApi<TResponse, TParam, THeader>
     : IHttpBinApi<TResponse, TParam, THeader>
        where TResponse : class
        where THeader : struct

    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIHttpBinApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_8ff83789e9d84c97981e15bd53567fd2 = new Type[] { typeof(TParam), typeof(THeader) };

        /// <inheritdoc />
        Task<TResponse> IHttpBinApi<TResponse, TParam, THeader>.Get(TParam param, THeader header)
        {
            var arguments = new object[] { param, header };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_8ff83789e9d84c97981e15bd53567fd2);
            return (Task<TResponse>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_975cbc248ee24861a11e409a0027c77a = new Type[] { typeof(TParam) };

        /// <inheritdoc />
        Task<TResponse> IHttpBinApi<TResponse, TParam, THeader>.GetQuery(TParam param)
        {
            var arguments = new object[] { param };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetQuery", ArgumentTypes_975cbc248ee24861a11e409a0027c77a);
            return (Task<TResponse>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_1724bcfa7adb42e683bf72fc20584224 = new Type[] { typeof(TParam) };

        /// <inheritdoc />
        Task<TResponse> IHttpBinApi<TResponse, TParam, THeader>.PostQuery(TParam param)
        {
            var arguments = new object[] { param };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostQuery", ArgumentTypes_1724bcfa7adb42e683bf72fc20584224);
            return (Task<TResponse>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_31a6a8cd9e19465baf47faecf71c6367 = new Type[] { typeof(TParam) };

        /// <inheritdoc />
        Task<TResponse> IHttpBinApi<TResponse, TParam, THeader>.GetQueryWithIncludeParameterName(TParam param)
        {
            var arguments = new object[] { param };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetQueryWithIncludeParameterName", ArgumentTypes_31a6a8cd9e19465baf47faecf71c6367);
            return (Task<TResponse>)func(Client, arguments);
        }

        private static class TypeHelper_32d63acc5d264362bec259a1ec2910bd<TValue>
        {
            public static readonly Type[] ArgumentTypes = new Type[] { typeof(TParam) };
            public static readonly Type[] TypeParameters = new Type[] { typeof(TValue) };
        }

        /// <inheritdoc />
        Task<TValue> IHttpBinApi<TResponse, TParam, THeader>.GetQuery1<TValue>(TParam param)
        {
            var arguments = new object[] { param };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetQuery1", TypeHelper_32d63acc5d264362bec259a1ec2910bd<TValue>.ArgumentTypes, TypeHelper_32d63acc5d264362bec259a1ec2910bd<TValue>.TypeParameters);
            return (Task<TValue>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIHttpContentApi : IHttpContentApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIHttpContentApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_e0bd494deec548fd826780052b71ec4e = new Type[] { typeof(HttpContent) };

        /// <inheritdoc />
        Task<HttpContent> IHttpContentApi.PostFileUpload(HttpContent content)
        {
            var arguments = new object[] { content };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostFileUpload", ArgumentTypes_e0bd494deec548fd826780052b71ec4e);
            return (Task<HttpContent>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_dfe62030c6004c71bb527a5f3ab94d12 = new Type[] { typeof(HttpContent) };

        /// <inheritdoc />
        Task<ApiResponse<HttpContent>> IHttpContentApi.PostFileUploadWithMetadata(HttpContent content)
        {
            var arguments = new object[] { content };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostFileUploadWithMetadata", ArgumentTypes_dfe62030c6004c71bb527a5f3ab94d12);
            return (Task<ApiResponse<HttpContent>>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Net.Http.Headers;
    using global::System.Text;
    using global::System.Text.Json;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::RichardSzalay.MockHttp;
    using global::Refit;
    using global::Refit.Buffers;
    using global::Xunit;
    using JsonSerializer =  global::Newtonsoft.Json.JsonSerializer;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedResponseTestsIMyAliasService : ResponseTests.IMyAliasService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedResponseTestsIMyAliasService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_fde75d58e4204ddba3a08ce7bfe1e7d8 = new Type[] {  };

        /// <inheritdoc />
        Task<TestAliasObject> ResponseTests.IMyAliasService.GetTestObject()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("GetTestObject", ArgumentTypes_fde75d58e4204ddba3a08ce7bfe1e7d8);
            return (Task<TestAliasObject>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::RichardSzalay.MockHttp;
    using global::Refit;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedAuthenticatedClientHandlerTestsIMyAuthenticatedService : AuthenticatedClientHandlerTests.IMyAuthenticatedService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedAuthenticatedClientHandlerTestsIMyAuthenticatedService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_d1ccada55ce14192ae7895a00eae6abd = new Type[] {  };

        /// <inheritdoc />
        Task<string> AuthenticatedClientHandlerTests.IMyAuthenticatedService.GetUnauthenticated()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUnauthenticated", ArgumentTypes_d1ccada55ce14192ae7895a00eae6abd);
            return (Task<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_d3f9801ff70541efa492ec0c1ac31789 = new Type[] {  };

        /// <inheritdoc />
        Task<string> AuthenticatedClientHandlerTests.IMyAuthenticatedService.GetAuthenticated()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAuthenticated", ArgumentTypes_d3f9801ff70541efa492ec0c1ac31789);
            return (Task<string>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using SomeType =  global::CollisionA.SomeType;
    using global::CollisionB;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedINamespaceCollisionApi : INamespaceCollisionApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedINamespaceCollisionApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_f4d218575e0c473db28da1edc3f5d821 = new Type[] {  };

        /// <inheritdoc />
        Task<SomeType> INamespaceCollisionApi.SomeRequest()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("SomeRequest", ArgumentTypes_f4d218575e0c473db28da1edc3f5d821);
            return (Task<SomeType>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Threading.Tasks;
    using global::Common.Helper;
    using global::Refit.Tests.Common;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedINamespaceOverlapApi : INamespaceOverlapApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedINamespaceOverlapApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_fd6d8723e35a4375b5d6cc199e345f58 = new Type[] {  };

        /// <inheritdoc />
        Task<SomeOtherType> INamespaceOverlapApi.SomeRequest()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("SomeRequest", ArgumentTypes_fd6d8723e35a4375b5d6cc199e345f58);
            return (Task<SomeOtherType>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Net.Http;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Refit;
    using static global::System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedTestNestedINestedGitHubApi : TestNested.INestedGitHubApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedTestNestedINestedGitHubApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_1aa9e1a664964925bfdb507256b1e93d = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task<User> TestNested.INestedGitHubApi.GetUser(string userName)
        {
            var arguments = new object[] { userName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUser", ArgumentTypes_1aa9e1a664964925bfdb507256b1e93d);
            return (Task<User>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_934e98aabf654fb8a54fb09784ccc583 = new Type[] { typeof(string) };

        /// <inheritdoc />
        IObservable<User> TestNested.INestedGitHubApi.GetUserObservable(string userName)
        {
            var arguments = new object[] { userName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUserObservable", ArgumentTypes_934e98aabf654fb8a54fb09784ccc583);
            return (IObservable<User>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_989d53fbefe94189b7a96c5abc3d5d6b = new Type[] { typeof(string) };

        /// <inheritdoc />
        IObservable<User> TestNested.INestedGitHubApi.GetUserCamelCase(string userName)
        {
            var arguments = new object[] { userName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUserCamelCase", ArgumentTypes_989d53fbefe94189b7a96c5abc3d5d6b);
            return (IObservable<User>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_39929cbbb0fa46a0ab21e60c6390966f = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task<List<User>> TestNested.INestedGitHubApi.GetOrgMembers(string orgName)
        {
            var arguments = new object[] { orgName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetOrgMembers", ArgumentTypes_39929cbbb0fa46a0ab21e60c6390966f);
            return (Task<List<User>>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_a5ea3ef1d02e45e48da8d8ddf5515d84 = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task<UserSearchResult> TestNested.INestedGitHubApi.FindUsers(string q)
        {
            var arguments = new object[] { q };
            var func = requestBuilder.BuildRestResultFuncForMethod("FindUsers", ArgumentTypes_a5ea3ef1d02e45e48da8d8ddf5515d84);
            return (Task<UserSearchResult>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_654bcf15105f40ca89fa453333abd530 = new Type[] {  };

        /// <inheritdoc />
        Task<HttpResponseMessage> TestNested.INestedGitHubApi.GetIndex()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("GetIndex", ArgumentTypes_654bcf15105f40ca89fa453333abd530);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_9e2bf872a17442de8da56891287387a4 = new Type[] {  };

        /// <inheritdoc />
        IObservable<string> TestNested.INestedGitHubApi.GetIndexObservable()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("GetIndexObservable", ArgumentTypes_9e2bf872a17442de8da56891287387a4);
            return (IObservable<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_eaf258c5aece4d16a8aa15d76132f74a = new Type[] {  };

        /// <inheritdoc />
        Task TestNested.INestedGitHubApi.NothingToSeeHere()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("NothingToSeeHere", ArgumentTypes_eaf258c5aece4d16a8aa15d76132f74a);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.CodeAnalysis;
    using global::Microsoft.CodeAnalysis.CSharp;
    using global::Microsoft.CodeAnalysis.CSharp.Syntax;
    using global::Refit;
    using global::Refit.Generator;
    using global::Xunit;
    using Task =  global::System.Threading.Tasks.Task;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedINonGenericInterfaceWithGenericMethod : INonGenericInterfaceWithGenericMethod
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedINonGenericInterfaceWithGenericMethod(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static class TypeHelper_b5a47e4eeca84837bffd25d3bdc03246<T>
        {
            public static readonly Type[] ArgumentTypes = new Type[] { typeof(T) };
            public static readonly Type[] TypeParameters = new Type[] { typeof(T) };
        }

        /// <inheritdoc />
        Task INonGenericInterfaceWithGenericMethod.PostMessage<T>(T message)
        {
            var arguments = new object[] { message };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostMessage", TypeHelper_b5a47e4eeca84837bffd25d3bdc03246<T>.ArgumentTypes, TypeHelper_b5a47e4eeca84837bffd25d3bdc03246<T>.TypeParameters);
            return (Task)func(Client, arguments);
        }

        private static class TypeHelper_49dffda4257642a8a6776c46de4ae559<T, U, V>
        {
            public static readonly Type[] ArgumentTypes = new Type[] { typeof(T), typeof(U), typeof(V) };
            public static readonly Type[] TypeParameters = new Type[] { typeof(T), typeof(U), typeof(V) };
        }

        /// <inheritdoc />
        Task INonGenericInterfaceWithGenericMethod.PostMessage<T, U, V>(T message, U param1, V param2)
        {
            var arguments = new object[] { message, param1, param2 };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostMessage", TypeHelper_49dffda4257642a8a6776c46de4ae559<T, U, V>.ArgumentTypes, TypeHelper_49dffda4257642a8a6776c46de4ae559<T, U, V>.TypeParameters);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedINpmJs : INpmJs
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedINpmJs(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_56dfebaefcdb47fba923abfd59d5f52a = new Type[] {  };

        /// <inheritdoc />
        Task<RootObject> INpmJs.GetCongruence()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("GetCongruence", ArgumentTypes_56dfebaefcdb47fba923abfd59d5f52a);
            return (Task<RootObject>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedINullableReferenceService : INullableReferenceService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedINullableReferenceService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_1cb3ee5c77114f4ea08663ccf509dc30 = new Type[] {  };

        /// <inheritdoc />
        string? INullableReferenceService.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_1cb3ee5c77114f4ea08663ccf509dc30);
            return (string?)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedINullableValueService : INullableValueService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedINullableValueService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_650c6af1b28c46e188b58894f6704f12 = new Type[] {  };

        /// <inheritdoc />
        int? INullableValueService.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_650c6af1b28c46e188b58894f6704f12);
            return (int?)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using ModelNamespace;
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIReducedUsingInsideNamespaceApi : IReducedUsingInsideNamespaceApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIReducedUsingInsideNamespaceApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_cd62d3f3d196464a8592542f094b7329 = new Type[] {  };

        /// <inheritdoc />
        Task<SomeType> IReducedUsingInsideNamespaceApi.SomeRequest()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("SomeRequest", ArgumentTypes_cd62d3f3d196464a8592542f094b7329);
            return (Task<SomeType>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIReferenceAndValueParametersService : IReferenceAndValueParametersService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIReferenceAndValueParametersService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_7f7ee8bf304e4de2a8862981e3ab9f48 = new Type[] { ToNullable(typeof(string)), ToNullable(typeof(int)) };

        /// <inheritdoc />
        Task IReferenceAndValueParametersService.Get(string? reference, int? value)
        {
            var arguments = new object[] { reference, value };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_7f7ee8bf304e4de2a8862981e3ab9f48);
            return (Task)func(Client, arguments);
        }

        private static Type ToNullable(Type type) => !type.IsValueType ? type : typeof(Nullable<>).MakeGenericType(type);
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIRefitInterfaceWithStaticMethod : IRefitInterfaceWithStaticMethod
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIRefitInterfaceWithStaticMethod(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_0ba8586508b24ec59a6906d46a2c3b48 = new Type[] {  };

        /// <inheritdoc />
        Task IRefitInterfaceWithStaticMethod.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_0ba8586508b24ec59a6906d46a2c3b48);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIRequestBin : IRequestBin
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIRequestBin(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_b87b0a5485bc445b9df0033f245b6567 = new Type[] {  };

        /// <inheritdoc />
        Task IRequestBin.Post()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Post", ArgumentTypes_b87b0a5485bc445b9df0033f245b6567);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_11a1cb839e35442ba3f9a1b150916c32 = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task IRequestBin.PostRawStringDefault(string str)
        {
            var arguments = new object[] { str };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostRawStringDefault", ArgumentTypes_11a1cb839e35442ba3f9a1b150916c32);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_dd7da2dba1a5425e97470899507e5c11 = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task IRequestBin.PostRawStringJson(string str)
        {
            var arguments = new object[] { str };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostRawStringJson", ArgumentTypes_dd7da2dba1a5425e97470899507e5c11);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_324ef6691f064a8eb5e6a4b0bb0fb94b = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task IRequestBin.PostRawStringUrlEncoded(string str)
        {
            var arguments = new object[] { str };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostRawStringUrlEncoded", ArgumentTypes_324ef6691f064a8eb5e6a4b0bb0fb94b);
            return (Task)func(Client, arguments);
        }

        private static class TypeHelper_2141e5a6a02e4cf5839bc0680b10d8bf<T>
        {
            public static readonly Type[] ArgumentTypes = new Type[] { typeof(T) };
            public static readonly Type[] TypeParameters = new Type[] { typeof(T) };
        }

        /// <inheritdoc />
        Task IRequestBin.PostGeneric<T>(T param)
        {
            var arguments = new object[] { param };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostGeneric", TypeHelper_2141e5a6a02e4cf5839bc0680b10d8bf<T>.ArgumentTypes, TypeHelper_2141e5a6a02e4cf5839bc0680b10d8bf<T>.TypeParameters);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reflection;
    using global::System.Threading.Tasks;
    using global::Xunit;
    using global::Refit;
    using global::System.Threading;
    using global::Newtonsoft.Json;
    using global::System.Text;
    using global::System.Net.Http.Headers;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIRunscopeApi : IRunscopeApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIRunscopeApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_88f3792289c243ecb97a877fb738cff7 = new Type[] { typeof(Stream) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadStream(Stream stream)
        {
            var arguments = new object[] { stream };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadStream", ArgumentTypes_88f3792289c243ecb97a877fb738cff7);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_45ff912751d64992aaa609889048a177 = new Type[] { typeof(Stream) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadStreamWithCustomBoundary(Stream stream)
        {
            var arguments = new object[] { stream };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadStreamWithCustomBoundary", ArgumentTypes_45ff912751d64992aaa609889048a177);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_093b9c0127ef45839492246b5fbe4893 = new Type[] { typeof(StreamPart) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadStreamPart(StreamPart stream)
        {
            var arguments = new object[] { stream };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadStreamPart", ArgumentTypes_093b9c0127ef45839492246b5fbe4893);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_63cef04ab489449d9276e88c089c60b0 = new Type[] { typeof(ModelObject), typeof(StreamPart) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadStreamPart(ModelObject someQueryParams, StreamPart stream)
        {
            var arguments = new object[] { someQueryParams, stream };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadStreamPart", ArgumentTypes_63cef04ab489449d9276e88c089c60b0);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_a510e7e908a249e78f972d86f5bea4ba = new Type[] { typeof(byte[]) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadBytes(byte[] bytes)
        {
            var arguments = new object[] { bytes };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadBytes", ArgumentTypes_a510e7e908a249e78f972d86f5bea4ba);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_5350e490399a4b3987f20ec366630fee = new Type[] { typeof(ByteArrayPart) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadBytesPart(ByteArrayPart bytes)
        {
            var arguments = new object[] { bytes };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadBytesPart", ArgumentTypes_5350e490399a4b3987f20ec366630fee);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_205eb88081a2422f817bf24482155579 = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadString(string someString)
        {
            var arguments = new object[] { someString };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadString", ArgumentTypes_205eb88081a2422f817bf24482155579);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_6d4a02ff94b44fa89a1269febe1fbf0a = new Type[] { typeof(IEnumerable<FileInfo>), typeof(FileInfo) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadFileInfo(IEnumerable<FileInfo> fileInfos, FileInfo anotherFile)
        {
            var arguments = new object[] { fileInfos, anotherFile };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadFileInfo", ArgumentTypes_6d4a02ff94b44fa89a1269febe1fbf0a);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_8859056121734edc9c99aa562505231f = new Type[] { typeof(IEnumerable<FileInfoPart>), typeof(FileInfoPart) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadFileInfoPart(IEnumerable<FileInfoPart> fileInfos, FileInfoPart anotherFile)
        {
            var arguments = new object[] { fileInfos, anotherFile };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadFileInfoPart", ArgumentTypes_8859056121734edc9c99aa562505231f);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_c5c283f30d7147a686bdbb42873042df = new Type[] { typeof(ModelObject) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadJsonObject(ModelObject theObject)
        {
            var arguments = new object[] { theObject };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadJsonObject", ArgumentTypes_c5c283f30d7147a686bdbb42873042df);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_287c7ab35dc84dddb7f7cc5656e16394 = new Type[] { typeof(IEnumerable<ModelObject>) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadJsonObjects(IEnumerable<ModelObject> theObjects)
        {
            var arguments = new object[] { theObjects };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadJsonObjects", ArgumentTypes_287c7ab35dc84dddb7f7cc5656e16394);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_e06638eb1f2d4226a27f66f226084289 = new Type[] { typeof(IEnumerable<ModelObject>), typeof(AnotherModel), typeof(FileInfo), typeof(AnEnum), typeof(string), typeof(int) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadMixedObjects(IEnumerable<ModelObject> theObjects, AnotherModel anotherModel, FileInfo aFile, AnEnum anEnum, string aString, int anInt)
        {
            var arguments = new object[] { theObjects, anotherModel, aFile, anEnum, aString, anInt };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadMixedObjects", ArgumentTypes_e06638eb1f2d4226a27f66f226084289);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_ca6132b180dc4cdbb67609eb8d37a18a = new Type[] { typeof(HttpContent) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadHttpContent(HttpContent content)
        {
            var arguments = new object[] { content };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadHttpContent", ArgumentTypes_ca6132b180dc4cdbb67609eb8d37a18a);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }
    }
}

namespace AutoGeneratedIServiceWithoutNamespace
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIServiceWithoutNamespace : IServiceWithoutNamespace
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIServiceWithoutNamespace(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_e776cab422f34342a86d28d182293e8b = new Type[] {  };

        /// <inheritdoc />
        Task IServiceWithoutNamespace.GetRoot()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("GetRoot", ArgumentTypes_e776cab422f34342a86d28d182293e8b);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_721c873c7a864c1f88e198ab8ec3b24d = new Type[] {  };

        /// <inheritdoc />
        Task IServiceWithoutNamespace.PostRoot()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("PostRoot", ArgumentTypes_721c873c7a864c1f88e198ab8ec3b24d);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIStreamApi : IStreamApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIStreamApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_924436df0bb149298ef71acee4e3a3f4 = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task<Stream> IStreamApi.GetRemoteFile(string filename)
        {
            var arguments = new object[] { filename };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetRemoteFile", ArgumentTypes_924436df0bb149298ef71acee4e3a3f4);
            return (Task<Stream>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_6ae54bf7e5ec4a61b87e0a0ee61ff662 = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task<ApiResponse<Stream>> IStreamApi.GetRemoteFileWithMetadata(string filename)
        {
            var arguments = new object[] { filename };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetRemoteFileWithMetadata", ArgumentTypes_6ae54bf7e5ec4a61b87e0a0ee61ff662);
            return (Task<ApiResponse<Stream>>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedITrimTrailingForwardSlashApi : ITrimTrailingForwardSlashApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedITrimTrailingForwardSlashApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_7a3f93a2e3674b30b73d9c2a05f4ad9f = new Type[] {  };

        /// <inheritdoc />
        Task ITrimTrailingForwardSlashApi.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_7a3f93a2e3674b30b73d9c2a05f4ad9f);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::CollisionA;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedITypeCollisionApiA : ITypeCollisionApiA
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedITypeCollisionApiA(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_435ba311aa2f403faecf2bd64c22bc50 = new Type[] {  };

        /// <inheritdoc />
        Task<SomeType> ITypeCollisionApiA.SomeARequest()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("SomeARequest", ArgumentTypes_435ba311aa2f403faecf2bd64c22bc50);
            return (Task<SomeType>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::CollisionB;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedITypeCollisionApiB : ITypeCollisionApiB
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedITypeCollisionApiB(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_c05a98bdd827409aab48a634ea5c15f9 = new Type[] {  };

        /// <inheritdoc />
        Task<SomeType> ITypeCollisionApiB.SomeBRequest()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("SomeBRequest", ArgumentTypes_c05a98bdd827409aab48a634ea5c15f9);
            return (Task<SomeType>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Threading.Tasks;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIUseOverloadedGenericMethods<TResponse, TParam, THeader>
     : IUseOverloadedGenericMethods<TResponse, TParam, THeader>
        where TResponse : class
        where THeader : struct

    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIUseOverloadedGenericMethods(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_22c7e3b6a764407498875eb0254488ca = new Type[] {  };

        /// <inheritdoc />
        Task<string> IUseOverloadedGenericMethods<TResponse, TParam, THeader>.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_22c7e3b6a764407498875eb0254488ca);
            return (Task<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_5ca05f21c5464503869c9766eb5919f9 = new Type[] { typeof(TParam), typeof(THeader) };

        /// <inheritdoc />
        Task<TResponse> IUseOverloadedGenericMethods<TResponse, TParam, THeader>.Get(TParam param, THeader header)
        {
            var arguments = new object[] { param, header };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_5ca05f21c5464503869c9766eb5919f9);
            return (Task<TResponse>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_c59678da0be04ebfbb12e4092ccfd3da = new Type[] { typeof(THeader), typeof(TParam) };

        /// <inheritdoc />
        Task<TResponse> IUseOverloadedGenericMethods<TResponse, TParam, THeader>.Get(THeader param, TParam header)
        {
            var arguments = new object[] { param, header };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_c59678da0be04ebfbb12e4092ccfd3da);
            return (Task<TResponse>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_e0b091b222ae48dfb45015b6f2bd2b3a = new Type[] { typeof(int) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IUseOverloadedGenericMethods<TResponse, TParam, THeader>.Get(int httpstatuscode)
        {
            var arguments = new object[] { httpstatuscode };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_e0b091b222ae48dfb45015b6f2bd2b3a);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static class TypeHelper_c924631c1ae54481b40a9f6bb5204c66<TValue>
        {
            public static readonly Type[] ArgumentTypes = new Type[] { typeof(int) };
            public static readonly Type[] TypeParameters = new Type[] { typeof(TValue) };
        }

        /// <inheritdoc />
        Task<TValue> IUseOverloadedGenericMethods<TResponse, TParam, THeader>.Get<TValue>(int someVal)
        {
            var arguments = new object[] { someVal };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", TypeHelper_c924631c1ae54481b40a9f6bb5204c66<TValue>.ArgumentTypes, TypeHelper_c924631c1ae54481b40a9f6bb5204c66<TValue>.TypeParameters);
            return (Task<TValue>)func(Client, arguments);
        }

        private static class TypeHelper_476335ac19a94bb0997e7a24c1644168<TValue, TInput>
        {
            public static readonly Type[] ArgumentTypes = new Type[] { typeof(TInput) };
            public static readonly Type[] TypeParameters = new Type[] { typeof(TValue), typeof(TInput) };
        }

        /// <inheritdoc />
        Task<TValue> IUseOverloadedGenericMethods<TResponse, TParam, THeader>.Get<TValue, TInput>(TInput input)
        {
            var arguments = new object[] { input };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", TypeHelper_476335ac19a94bb0997e7a24c1644168<TValue, TInput>.ArgumentTypes, TypeHelper_476335ac19a94bb0997e7a24c1644168<TValue, TInput>.TypeParameters);
            return (Task<TValue>)func(Client, arguments);
        }

        private static class TypeHelper_e03b91f334714b879db4aab11e07612d<TInput1, TInput2>
        {
            public static readonly Type[] ArgumentTypes = new Type[] { typeof(TInput1), typeof(TInput2) };
            public static readonly Type[] TypeParameters = new Type[] { typeof(TInput1), typeof(TInput2) };
        }

        /// <inheritdoc />
        Task IUseOverloadedGenericMethods<TResponse, TParam, THeader>.Get<TInput1, TInput2>(TInput1 input1, TInput2 input2)
        {
            var arguments = new object[] { input1, input2 };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", TypeHelper_e03b91f334714b879db4aab11e07612d<TInput1, TInput2>.ArgumentTypes, TypeHelper_e03b91f334714b879db4aab11e07612d<TInput1, TInput2>.TypeParameters);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Threading.Tasks;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIUseOverloadedMethods : IUseOverloadedMethods
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIUseOverloadedMethods(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_60dc6b71a25144929593d89ba5ff2264 = new Type[] {  };

        /// <inheritdoc />
        Task<string> IUseOverloadedMethods.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_60dc6b71a25144929593d89ba5ff2264);
            return (Task<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_07028f211ed74e48b1c062f574b4aa79 = new Type[] { typeof(int) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IUseOverloadedMethods.Get(int httpstatuscode)
        {
            var arguments = new object[] { httpstatuscode };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_07028f211ed74e48b1c062f574b4aa79);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIValidApi : IValidApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIValidApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_10c8310e2d33499aab173cbb1f92fa45 = new Type[] {  };

        /// <inheritdoc />
        Task IValidApi.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_10c8310e2d33499aab173cbb1f92fa45);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::Refit.Tests.SomeNamespace;
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedNamespaceWithGlobalAliasApi : NamespaceWithGlobalAliasApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedNamespaceWithGlobalAliasApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_8a31d25c22b34166bc3105f3abaf6b58 = new Type[] {  };

        /// <inheritdoc />
        Task<SomeType> NamespaceWithGlobalAliasApi.SomeRequest()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("SomeRequest", ArgumentTypes_8a31d25c22b34166bc3105f3abaf6b58);
            return (Task<SomeType>)func(Client, arguments);
        }
    }
}

#pragma warning restore CS8632 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.
#pragma warning restore CS8669 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.
