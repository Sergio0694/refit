// <auto-generated />
using System;
using System.Net.Http;
using System.Collections.Generic;
using Refit.Tests.RefitInternalGenerated;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#pragma warning disable
namespace Refit.Tests.RefitInternalGenerated
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {

        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}
#pragma warning restore

#pragma warning disable CS8632 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.
#pragma warning disable CS8669 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.
namespace Refit.Tests
{
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.CodeAnalysis;
    using global::Microsoft.CodeAnalysis.CSharp;
    using global::Microsoft.CodeAnalysis.CSharp.Syntax;
    using global::Refit;
    using global::Refit.Generator;
    using global::Xunit;
    using Task =  global::System.Threading.Tasks.Task;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIAmARefitInterfaceButNobodyUsesMe : IAmARefitInterfaceButNobodyUsesMe
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIAmARefitInterfaceButNobodyUsesMe(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_22065d48f4d24ffd8a189b6fccd7b321 = Array.Empty<Type>();

        /// <inheritdoc />
        Task IAmARefitInterfaceButNobodyUsesMe.RefitMethod()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("RefitMethod", ArgumentTypes_22065d48f4d24ffd8a189b6fccd7b321);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_3c7b5ebe31d74f6f82bb1086e9ed1ede = Array.Empty<Type>();

        /// <inheritdoc />
        Task IAmARefitInterfaceButNobodyUsesMe.AnotherRefitMethod()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("AnotherRefitMethod", ArgumentTypes_3c7b5ebe31d74f6f82bb1086e9ed1ede);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_56d3bdab41c245258277a5e1419c4ce7 = Array.Empty<Type>();

        /// <inheritdoc />
        Task IAmARefitInterfaceButNobodyUsesMe.NoConstantsAllowed()
        {
            throw new NotImplementedException("Either this method has no Refit HTTP method attribute or you've used something other than a string literal for the 'path' argument.");
        }

        private static readonly Type[] ArgumentTypes_07e1bea14e384414bcef31bb7948f0af = Array.Empty<Type>();

        /// <inheritdoc />
        Task IAmARefitInterfaceButNobodyUsesMe.SpacesShouldntBreakMe()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("SpacesShouldntBreakMe", ArgumentTypes_07e1bea14e384414bcef31bb7948f0af);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_c0d956c2aca5403cbb9625c946903a8d = new Type[] { typeof(int), typeof(string), typeof(float) };

        /// <inheritdoc />
        Task IAmARefitInterfaceButNobodyUsesMe.ReservedWordsForParameterNames(int @int, string @string, float @long)
        {
            var arguments = new object[] { @int, @string, @long };
            var func = requestBuilder.BuildRestResultFuncForMethod("ReservedWordsForParameterNames", ArgumentTypes_c0d956c2aca5403cbb9625c946903a8d);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIAmHalfRefit : IAmHalfRefit
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIAmHalfRefit(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_591ba265582449109178c33946ec7ad6 = Array.Empty<Type>();

        /// <inheritdoc />
        Task IAmHalfRefit.Post()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Post", ArgumentTypes_591ba265582449109178c33946ec7ad6);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_845ef242566043c799eade8aaea24dfb = Array.Empty<Type>();

        /// <inheritdoc />
        Task IAmHalfRefit.Get()
        {
            throw new NotImplementedException("Either this method has no Refit HTTP method attribute or you've used something other than a string literal for the 'path' argument.");
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;
    using static global::System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIAmInterface : IAmInterface
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIAmInterface(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_ade0ecec24c7457293aea04c31322205 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string> IAmInterface.Pang()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Pang", ArgumentTypes_ade0ecec24c7457293aea04c31322205);
            return (Task<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_c94060438611411d97ed407cbf1634a3 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string> IAmInterfaceB.Pong()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Pong", ArgumentTypes_c94060438611411d97ed407cbf1634a3);
            return (Task<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_206f5e0a1e6047f4802de8ab10f2255c = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string> IAmInterfaceD.Test()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Test", ArgumentTypes_206f5e0a1e6047f4802de8ab10f2255c);
            return (Task<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_481fb086bc824ad7bb08b64c91fdc9ce = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string> IAmInterfaceA.Ping()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Ping", ArgumentTypes_481fb086bc824ad7bb08b64c91fdc9ce);
            return (Task<string>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;
    using static global::System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIAmInterfaceA : IAmInterfaceA
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIAmInterfaceA(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_ae76fcb211ca4d5c8a17c5a1d0396dbf = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string> IAmInterfaceA.Ping()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Ping", ArgumentTypes_ae76fcb211ca4d5c8a17c5a1d0396dbf);
            return (Task<string>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;
    using static global::System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIAmInterfaceB : IAmInterfaceB
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIAmInterfaceB(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_8257260eac834aeabc0e98cf27e55711 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string> IAmInterfaceB.Pong()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Pong", ArgumentTypes_8257260eac834aeabc0e98cf27e55711);
            return (Task<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_be967b768949424abb3978c683af3d94 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string> IAmInterfaceD.Test()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Test", ArgumentTypes_be967b768949424abb3978c683af3d94);
            return (Task<string>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;
    using static global::System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIAmInterfaceC : IAmInterfaceC
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIAmInterfaceC(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_23e15df3f8ba40d78535d553f38dd2d6 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string> IAmInterfaceC.Pang()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Pang", ArgumentTypes_23e15df3f8ba40d78535d553f38dd2d6);
            return (Task<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_2e5992d858644a41a04cb6a6f9b9d883 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string> IAmInterfaceB.Pong()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Pong", ArgumentTypes_2e5992d858644a41a04cb6a6f9b9d883);
            return (Task<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_c779ae64849f4053a004aee5eadfe214 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string> IAmInterfaceD.Test()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Test", ArgumentTypes_c779ae64849f4053a004aee5eadfe214);
            return (Task<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_02298b660a4f4e49a1f4ead4db19ea8b = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string> IAmInterfaceA.Ping()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Ping", ArgumentTypes_02298b660a4f4e49a1f4ead4db19ea8b);
            return (Task<string>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;
    using static global::System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIAmInterfaceD : IAmInterfaceD
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIAmInterfaceD(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_deb51810d564472ea6237de9d57403bf = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string> IAmInterfaceD.Test()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Test", ArgumentTypes_deb51810d564472ea6237de9d57403bf);
            return (Task<string>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIApiBindPathToObject : IApiBindPathToObject
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIApiBindPathToObject(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_2f1921e4e8cd458aafa224fb8f7c2d9c = new Type[] { typeof(PathBoundObject) };

        /// <inheritdoc />
        Task IApiBindPathToObject.GetFooBars(PathBoundObject request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFooBars", ArgumentTypes_2f1921e4e8cd458aafa224fb8f7c2d9c);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_29005f335b2a4e9db554427208169e63 = new Type[] { typeof(PathBoundObject) };

        /// <inheritdoc />
        Task IApiBindPathToObject.GetFooBarsWithDifferentCasing(PathBoundObject requestParams)
        {
            var arguments = new object[] { requestParams };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFooBarsWithDifferentCasing", ArgumentTypes_29005f335b2a4e9db554427208169e63);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_20e7ad5cf54543f689a44bd2ce597e70 = new Type[] { typeof(string), typeof(PathBoundObject) };

        /// <inheritdoc />
        Task IApiBindPathToObject.GetBarsByFoo(string id, PathBoundObject request)
        {
            var arguments = new object[] { id, request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetBarsByFoo", ArgumentTypes_20e7ad5cf54543f689a44bd2ce597e70);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_a51b92bcb8cd4484bc1fcdef645330ec = new Type[] { typeof(PathBoundObject), typeof(string) };

        /// <inheritdoc />
        Task IApiBindPathToObject.GetFooBars(PathBoundObject request, string someProperty)
        {
            var arguments = new object[] { request, someProperty };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFooBars", ArgumentTypes_a51b92bcb8cd4484bc1fcdef645330ec);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_84d02603987a496594579cc15dab8168 = new Type[] { typeof(PathBoundObject) };

        /// <inheritdoc />
        Task IApiBindPathToObject.GetBarsByFoo(PathBoundObject request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetBarsByFoo", ArgumentTypes_84d02603987a496594579cc15dab8168);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_2fdea158653f44fa8361119a0e2ecfe5 = new Type[] { typeof(PathBoundObjectWithQueryFormat) };

        /// <inheritdoc />
        Task IApiBindPathToObject.GetBarsWithCustomQueryFormat(PathBoundObjectWithQueryFormat request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetBarsWithCustomQueryFormat", ArgumentTypes_2fdea158653f44fa8361119a0e2ecfe5);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_f0b18748f9d741b1b683044cd99ff5ec = new Type[] { typeof(PathBoundDerivedObject) };

        /// <inheritdoc />
        Task IApiBindPathToObject.GetFooBarsDerived(PathBoundDerivedObject request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFooBarsDerived", ArgumentTypes_f0b18748f9d741b1b683044cd99ff5ec);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_7207399a14c34ab0ab0e059183449ff6 = new Type[] { typeof(PathBoundList) };

        /// <inheritdoc />
        Task IApiBindPathToObject.GetFoos(PathBoundList request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFoos", ArgumentTypes_7207399a14c34ab0ab0e059183449ff6);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_3a8b69bbd21047cf90671382c43f2b3c = new Type[] { typeof(List<int>) };

        /// <inheritdoc />
        Task IApiBindPathToObject.GetFoos2(List<int> Values)
        {
            var arguments = new object[] { Values };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFoos2", ArgumentTypes_3a8b69bbd21047cf90671382c43f2b3c);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_6fba2b6bf80a457c8376eca5b089b2db = new Type[] { typeof(PathBoundObject), typeof(object) };

        /// <inheritdoc />
        Task IApiBindPathToObject.PostFooBar(PathBoundObject request, object someObject)
        {
            var arguments = new object[] { request, someObject };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostFooBar", ArgumentTypes_6fba2b6bf80a457c8376eca5b089b2db);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_8eabd5f74ba14b5b934a03980f37b01c = new Type[] { typeof(PathBoundObjectWithQuery) };

        /// <inheritdoc />
        Task IApiBindPathToObject.GetFooBars(PathBoundObjectWithQuery request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFooBars", ArgumentTypes_8eabd5f74ba14b5b934a03980f37b01c);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_4ae7659f2e534f6a99ffa76ceb478fa9 = new Type[] { typeof(PathBoundObject), typeof(ModelObject) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IApiBindPathToObject.PostFooBar(PathBoundObject request, ModelObject someQueryParams)
        {
            var arguments = new object[] { request, someQueryParams };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostFooBar", ArgumentTypes_4ae7659f2e534f6a99ffa76ceb478fa9);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_e5c6708886264aebb8424d0933097a47 = new Type[] { typeof(PathBoundObject), typeof(ModelObject), typeof(StreamPart) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IApiBindPathToObject.PostFooBarStreamPart(PathBoundObject request, ModelObject someQueryParams, StreamPart stream)
        {
            var arguments = new object[] { request, someQueryParams, stream };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostFooBarStreamPart", ArgumentTypes_e5c6708886264aebb8424d0933097a47);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_1c7a7d35f3094f78bf3bc7fbe585e76b = new Type[] { typeof(PathBoundObject), typeof(StreamPart) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IApiBindPathToObject.PostFooBarStreamPart(PathBoundObject request, StreamPart stream)
        {
            var arguments = new object[] { request, stream };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostFooBarStreamPart", ArgumentTypes_1c7a7d35f3094f78bf3bc7fbe585e76b);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_9eae242b9fb7475396b1b61691b5bba8 = new Type[] { typeof(PathBoundObjectWithQuery), typeof(StreamPart) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IApiBindPathToObject.PostFooBarStreamPart(PathBoundObjectWithQuery request, StreamPart stream)
        {
            var arguments = new object[] { request, stream };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostFooBarStreamPart", ArgumentTypes_9eae242b9fb7475396b1b61691b5bba8);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIApiWithDecimal : IApiWithDecimal
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIApiWithDecimal(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_5f3a5971164e455cb38642a6c552e6c6 = new Type[] { typeof(decimal) };

        /// <inheritdoc />
        Task<string> IApiWithDecimal.GetWithDecimal(decimal value)
        {
            var arguments = new object[] { value };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetWithDecimal", ArgumentTypes_5f3a5971164e455cb38642a6c552e6c6);
            return (Task<string>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIBodylessApi : IBodylessApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIBodylessApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_af73cadb00a54d2e901c31593e7a2673 = Array.Empty<Type>();

        /// <inheritdoc />
        Task IBodylessApi.Post()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Post", ArgumentTypes_af73cadb00a54d2e901c31593e7a2673);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_d4337923a6c94c11abfb3968409b1119 = Array.Empty<Type>();

        /// <inheritdoc />
        Task IBodylessApi.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_d4337923a6c94c11abfb3968409b1119);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_8f89584bff424850b5c2d525c141a25f = Array.Empty<Type>();

        /// <inheritdoc />
        Task IBodylessApi.Head()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Head", ArgumentTypes_8f89584bff424850b5c2d525c141a25f);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.CodeAnalysis;
    using global::Microsoft.CodeAnalysis.CSharp;
    using global::Microsoft.CodeAnalysis.CSharp.Syntax;
    using global::Refit;
    using global::Refit.Generator;
    using global::Xunit;
    using Task =  global::System.Threading.Tasks.Task;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIBoringCrudApi<T, TKey>
     : IBoringCrudApi<T, TKey>
        where T : class

    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIBoringCrudApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_ad1f4c2cf69c4850857c9c75f359b7bd = new Type[] { typeof(T) };

        /// <inheritdoc />
        Task<T> IBoringCrudApi<T, TKey>.Create(T paylod)
        {
            var arguments = new object[] { paylod };
            var func = requestBuilder.BuildRestResultFuncForMethod("Create", ArgumentTypes_ad1f4c2cf69c4850857c9c75f359b7bd);
            return (Task<T>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_04c8fd0955014438a173f357dc5c83d6 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<List<T>> IBoringCrudApi<T, TKey>.ReadAll()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadAll", ArgumentTypes_04c8fd0955014438a173f357dc5c83d6);
            return (Task<List<T>>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_d78fb9c8e82c4d87babcc7d8c5343c9a = new Type[] { typeof(TKey) };

        /// <inheritdoc />
        Task<T> IBoringCrudApi<T, TKey>.ReadOne(TKey key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadOne", ArgumentTypes_d78fb9c8e82c4d87babcc7d8c5343c9a);
            return (Task<T>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_187e13d080c84b9e815cb3786c3020ed = new Type[] { typeof(TKey), typeof(T) };

        /// <inheritdoc />
        Task IBoringCrudApi<T, TKey>.Update(TKey key, T payload)
        {
            var arguments = new object[] { key, payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", ArgumentTypes_187e13d080c84b9e815cb3786c3020ed);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_66dd32d3e64d43d693e1869de566c1c7 = new Type[] { typeof(TKey) };

        /// <inheritdoc />
        Task IBoringCrudApi<T, TKey>.Delete(TKey key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", ArgumentTypes_66dd32d3e64d43d693e1869de566c1c7);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIBrokenWebApi : IBrokenWebApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIBrokenWebApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_0d072c7a679047f69582a78eef3f89f2 = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task<bool> IBrokenWebApi.PostAValue(string derp)
        {
            var arguments = new object[] { derp };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostAValue", ArgumentTypes_0d072c7a679047f69582a78eef3f89f2);
            return (Task<bool>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedICustomNullableReferenceService : ICustomNullableReferenceService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedICustomNullableReferenceService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_57e4561dcea74ecb94f2577f87bad031 = Array.Empty<Type>();

        /// <inheritdoc />
        CustomReferenceType? ICustomNullableReferenceService.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_57e4561dcea74ecb94f2577f87bad031);
            return (CustomReferenceType?)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedICustomNullableValueService : ICustomNullableValueService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedICustomNullableValueService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_8fb3c8d82e97414bb00dabf02e3ee213 = Array.Empty<Type>();

        /// <inheritdoc />
        CustomValueType? ICustomNullableValueService.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_8fb3c8d82e97414bb00dabf02e3ee213);
            return (CustomValueType?)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedICustomReferenceAndValueParametersService : ICustomReferenceAndValueParametersService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedICustomReferenceAndValueParametersService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_fcc63410fda9457982c2c9edc7914075 = new Type[] { ToNullable(typeof(CustomReferenceType)), ToNullable(typeof(CustomValueType)) };

        /// <inheritdoc />
        Task ICustomReferenceAndValueParametersService.Get(CustomReferenceType? reference, CustomValueType? value)
        {
            var arguments = new object[] { reference, value };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_fcc63410fda9457982c2c9edc7914075);
            return (Task)func(Client, arguments);
        }

        private static Type ToNullable(Type type) => !type.IsValueType ? type : typeof(Nullable<>).MakeGenericType(type);
    }
}

namespace Refit.Tests
{
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;
    using global::Refit;
    using static global::System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIDataApiA : IDataApiA
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIDataApiA(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_b10ce986992240fca116c065375af711 = Array.Empty<Type>();

        /// <inheritdoc />
        Task IDataApiA.PingA()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("PingA", ArgumentTypes_b10ce986992240fca116c065375af711);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_a20f48f432424a18bdf114fe0ae6f4e0 = new Type[] { typeof(DataEntity) };

        /// <inheritdoc />
        Task<DataEntity> IDataCrudApi<DataEntity>.Copy(DataEntity payload)
        {
            var arguments = new object[] { payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Copy", ArgumentTypes_a20f48f432424a18bdf114fe0ae6f4e0);
            return (Task<DataEntity>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_628553263d8d4c798d53f3c302bb42c1 = new Type[] { typeof(DataEntity) };

        /// <inheritdoc />
        Task<DataEntity> IDataCrudApi<DataEntity, long>.Create(DataEntity payload)
        {
            var arguments = new object[] { payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Create", ArgumentTypes_628553263d8d4c798d53f3c302bb42c1);
            return (Task<DataEntity>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_c2a7fa79b01b4ab7b57c7f82d8624d77 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<List<DataEntity>> IDataCrudApi<DataEntity, long>.ReadAll()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadAll", ArgumentTypes_c2a7fa79b01b4ab7b57c7f82d8624d77);
            return (Task<List<DataEntity>>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_064a70c8bcf049f29a3f2e04f2a47635 = new Type[] { typeof(long) };

        /// <inheritdoc />
        Task<DataEntity> IDataCrudApi<DataEntity, long>.ReadOne(long key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadOne", ArgumentTypes_064a70c8bcf049f29a3f2e04f2a47635);
            return (Task<DataEntity>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_1b47a6afec0e42e8b5ebbdc4b090db37 = new Type[] { typeof(long), typeof(DataEntity) };

        /// <inheritdoc />
        Task IDataCrudApi<DataEntity, long>.Update(long key, DataEntity payload)
        {
            var arguments = new object[] { key, payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", ArgumentTypes_1b47a6afec0e42e8b5ebbdc4b090db37);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_6e3dd647665b4fd7898ec5c3c00e7d40 = new Type[] { typeof(long) };

        /// <inheritdoc />
        Task IDataCrudApi<DataEntity, long>.Delete(long key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", ArgumentTypes_6e3dd647665b4fd7898ec5c3c00e7d40);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;
    using global::Refit;
    using static global::System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIDataApiB : IDataApiB
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIDataApiB(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_d238b19041f54c8da7f723599dcf925a = Array.Empty<Type>();

        /// <inheritdoc />
        Task IDataApiB.PingB()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("PingB", ArgumentTypes_d238b19041f54c8da7f723599dcf925a);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_4e981407577f46ef8a229d05c5068080 = new Type[] { typeof(DataEntity) };

        /// <inheritdoc />
        Task<DataEntity> IDataCrudApi<DataEntity, int>.Create(DataEntity payload)
        {
            var arguments = new object[] { payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Create", ArgumentTypes_4e981407577f46ef8a229d05c5068080);
            return (Task<DataEntity>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_8d0cd886e9244c55aae31dc9dab933c4 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<List<DataEntity>> IDataCrudApi<DataEntity, int>.ReadAll()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadAll", ArgumentTypes_8d0cd886e9244c55aae31dc9dab933c4);
            return (Task<List<DataEntity>>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_9d4ee44cc7ff4067a0156a7ec5a3536e = new Type[] { typeof(int) };

        /// <inheritdoc />
        Task<DataEntity> IDataCrudApi<DataEntity, int>.ReadOne(int key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadOne", ArgumentTypes_9d4ee44cc7ff4067a0156a7ec5a3536e);
            return (Task<DataEntity>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_45ba3a64c91241ec9c2178f4e831ca17 = new Type[] { typeof(int), typeof(DataEntity) };

        /// <inheritdoc />
        Task IDataCrudApi<DataEntity, int>.Update(int key, DataEntity payload)
        {
            var arguments = new object[] { key, payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", ArgumentTypes_45ba3a64c91241ec9c2178f4e831ca17);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_6eaf378a13834759946a257eb19fbf0e = new Type[] { typeof(int) };

        /// <inheritdoc />
        Task IDataCrudApi<DataEntity, int>.Delete(int key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", ArgumentTypes_6eaf378a13834759946a257eb19fbf0e);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;
    using global::Refit;
    using static global::System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIDataCrudApi<T>
     : IDataCrudApi<T>
        where T : class

    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIDataCrudApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_71b9bcddb7564c499b08639f0af919c4 = new Type[] { typeof(T) };

        /// <inheritdoc />
        Task<T> IDataCrudApi<T>.Copy(T payload)
        {
            var arguments = new object[] { payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Copy", ArgumentTypes_71b9bcddb7564c499b08639f0af919c4);
            return (Task<T>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_87992fa8fa1a4b6aaa0e9892675eb22a = new Type[] { typeof(T) };

        /// <inheritdoc />
        Task<T> IDataCrudApi<T, long>.Create(T payload)
        {
            var arguments = new object[] { payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Create", ArgumentTypes_87992fa8fa1a4b6aaa0e9892675eb22a);
            return (Task<T>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_1322cfe918d94ee189c5313d3ebb01ba = Array.Empty<Type>();

        /// <inheritdoc />
        Task<List<T>> IDataCrudApi<T, long>.ReadAll()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadAll", ArgumentTypes_1322cfe918d94ee189c5313d3ebb01ba);
            return (Task<List<T>>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_d31ab71a47924c3288cd3faa08914d2e = new Type[] { typeof(long) };

        /// <inheritdoc />
        Task<T> IDataCrudApi<T, long>.ReadOne(long key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadOne", ArgumentTypes_d31ab71a47924c3288cd3faa08914d2e);
            return (Task<T>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_7bb86e7105f24ab7b9e20be1d3105460 = new Type[] { typeof(long), typeof(T) };

        /// <inheritdoc />
        Task IDataCrudApi<T, long>.Update(long key, T payload)
        {
            var arguments = new object[] { key, payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", ArgumentTypes_7bb86e7105f24ab7b9e20be1d3105460);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_2f8e8d0e95dc4e8b8ba08496bc000ee8 = new Type[] { typeof(long) };

        /// <inheritdoc />
        Task IDataCrudApi<T, long>.Delete(long key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", ArgumentTypes_2f8e8d0e95dc4e8b8ba08496bc000ee8);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;
    using global::Refit;
    using static global::System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIDataCrudApi<T, TKey>
     : IDataCrudApi<T, TKey>
        where T : class

    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIDataCrudApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_d5a7e938cf7b4b7ba17a98963dc7940d = new Type[] { typeof(T) };

        /// <inheritdoc />
        Task<T> IDataCrudApi<T, TKey>.Create(T payload)
        {
            var arguments = new object[] { payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Create", ArgumentTypes_d5a7e938cf7b4b7ba17a98963dc7940d);
            return (Task<T>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_4bf9309833c1481482ec612e321acfb6 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<List<T>> IDataCrudApi<T, TKey>.ReadAll()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadAll", ArgumentTypes_4bf9309833c1481482ec612e321acfb6);
            return (Task<List<T>>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_57d0411c4ca14539b79045be9b8ca682 = new Type[] { typeof(TKey) };

        /// <inheritdoc />
        Task<T> IDataCrudApi<T, TKey>.ReadOne(TKey key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadOne", ArgumentTypes_57d0411c4ca14539b79045be9b8ca682);
            return (Task<T>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_893103671d944130b4e9d213a8b3813e = new Type[] { typeof(TKey), typeof(T) };

        /// <inheritdoc />
        Task IDataCrudApi<T, TKey>.Update(TKey key, T payload)
        {
            var arguments = new object[] { key, payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", ArgumentTypes_893103671d944130b4e9d213a8b3813e);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_db96b481f5a34e91abb2d2c1c94e4224 = new Type[] { typeof(TKey) };

        /// <inheritdoc />
        Task IDataCrudApi<T, TKey>.Delete(TKey key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", ArgumentTypes_db96b481f5a34e91abb2d2c1c94e4224);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIGenericNullableReferenceParameterService : IGenericNullableReferenceParameterService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIGenericNullableReferenceParameterService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_13a15dc7c6b242418b4227b4574c5f4f = new Type[] { ToNullable(typeof(System.Collections.Generic.List<string>)) };

        /// <inheritdoc />
        Task IGenericNullableReferenceParameterService.Get(System.Collections.Generic.List<string>? reference)
        {
            var arguments = new object[] { reference };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_13a15dc7c6b242418b4227b4574c5f4f);
            return (Task)func(Client, arguments);
        }

        private static Type ToNullable(Type type) => !type.IsValueType ? type : typeof(Nullable<>).MakeGenericType(type);
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIGenericNullableReferenceService : IGenericNullableReferenceService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIGenericNullableReferenceService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_106f2fae1601495aa447df1f0adb0048 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string>? IGenericNullableReferenceService.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_106f2fae1601495aa447df1f0adb0048);
            return (Task<string>?)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIGenericNullableValueService : IGenericNullableValueService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIGenericNullableValueService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_cb06d7afda124ee2b3b5450e88980c50 = Array.Empty<Type>();

        /// <inheritdoc />
        ValueTask<int>? IGenericNullableValueService.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_cb06d7afda124ee2b3b5450e88980c50);
            return (ValueTask<int>?)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIGenericNullableWithNullableReferenceParameterService : IGenericNullableWithNullableReferenceParameterService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIGenericNullableWithNullableReferenceParameterService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_fe6eb6a4a342420684e6093279ff29ef = new Type[] { ToNullable(typeof(System.Collections.Generic.List<string?>)) };

        /// <inheritdoc />
        Task IGenericNullableWithNullableReferenceParameterService.Get(System.Collections.Generic.List<string?>? reference)
        {
            var arguments = new object[] { reference };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_fe6eb6a4a342420684e6093279ff29ef);
            return (Task)func(Client, arguments);
        }

        private static Type ToNullable(Type type) => !type.IsValueType ? type : typeof(Nullable<>).MakeGenericType(type);
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIGenericNullableWithNullableReferenceService : IGenericNullableWithNullableReferenceService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIGenericNullableWithNullableReferenceService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_84753181f37d4a6596523635fb48df1e = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string?>? IGenericNullableWithNullableReferenceService.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_84753181f37d4a6596523635fb48df1e);
            return (Task<string?>?)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIGenericNullableWithNullableValueService : IGenericNullableWithNullableValueService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIGenericNullableWithNullableValueService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_d52bf53f49844242998c1be469980469 = Array.Empty<Type>();

        /// <inheritdoc />
        ValueTask<int?>? IGenericNullableWithNullableValueService.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_d52bf53f49844242998c1be469980469);
            return (ValueTask<int?>?)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIGenericWithNullableReferenceParameterService : IGenericWithNullableReferenceParameterService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIGenericWithNullableReferenceParameterService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_4ce35c41b2b743e9a69aa06af81ace35 = new Type[] { typeof(System.Collections.Generic.List<string?>) };

        /// <inheritdoc />
        Task IGenericWithNullableReferenceParameterService.Get(System.Collections.Generic.List<string?> reference)
        {
            var arguments = new object[] { reference };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_4ce35c41b2b743e9a69aa06af81ace35);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIGenericWithNullableValueService : IGenericWithNullableValueService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIGenericWithNullableValueService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_7e391892bdf2446eaed38150550852cb = Array.Empty<Type>();

        /// <inheritdoc />
        Task<int?> IGenericWithNullableValueService.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_7e391892bdf2446eaed38150550852cb);
            return (Task<int?>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIGenericWithResultService : IGenericWithResultService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIGenericWithResultService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_4e8c5fed565a4a739a481c8ddfb5a0c7 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string?> IGenericWithResultService.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_4e8c5fed565a4a739a481c8ddfb5a0c7);
            return (Task<string?>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Net.Http;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Refit;
    using static global::System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIGitHubApi : IGitHubApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIGitHubApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_08827eccfd2c4d45bfdf98f75a00091d = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task<User> IGitHubApi.GetUser(string userName)
        {
            var arguments = new object[] { userName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUser", ArgumentTypes_08827eccfd2c4d45bfdf98f75a00091d);
            return (Task<User>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_c44f3b4253ad480a9d04b66ac3c06964 = new Type[] { typeof(string) };

        /// <inheritdoc />
        IObservable<User> IGitHubApi.GetUserObservable(string userName)
        {
            var arguments = new object[] { userName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUserObservable", ArgumentTypes_c44f3b4253ad480a9d04b66ac3c06964);
            return (IObservable<User>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_7472f7d9d38447a089fbf00142d3f7eb = new Type[] { typeof(string) };

        /// <inheritdoc />
        IObservable<User> IGitHubApi.GetUserCamelCase(string userName)
        {
            var arguments = new object[] { userName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUserCamelCase", ArgumentTypes_7472f7d9d38447a089fbf00142d3f7eb);
            return (IObservable<User>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_f9dfd342159a4602a49f9200af3b3e1c = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task<List<User>> IGitHubApi.GetOrgMembers(string orgName)
        {
            var arguments = new object[] { orgName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetOrgMembers", ArgumentTypes_f9dfd342159a4602a49f9200af3b3e1c);
            return (Task<List<User>>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_6a6f9a5cb8c645b4855255d8ca4e62e0 = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task<UserSearchResult> IGitHubApi.FindUsers(string q)
        {
            var arguments = new object[] { q };
            var func = requestBuilder.BuildRestResultFuncForMethod("FindUsers", ArgumentTypes_6a6f9a5cb8c645b4855255d8ca4e62e0);
            return (Task<UserSearchResult>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_57f5d94227ec4fd687bfab14a53ed648 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<HttpResponseMessage> IGitHubApi.GetIndex()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("GetIndex", ArgumentTypes_57f5d94227ec4fd687bfab14a53ed648);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_02e3cf72bad442009c720637219a1640 = Array.Empty<Type>();

        /// <inheritdoc />
        IObservable<string> IGitHubApi.GetIndexObservable()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("GetIndexObservable", ArgumentTypes_02e3cf72bad442009c720637219a1640);
            return (IObservable<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_1fb8bc4848e94599b67e76fe74cf9419 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<User> IGitHubApi.NothingToSeeHere()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("NothingToSeeHere", ArgumentTypes_1fb8bc4848e94599b67e76fe74cf9419);
            return (Task<User>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_3503f77eddf34694a7c4240c12b5eac7 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<ApiResponse<User>> IGitHubApi.NothingToSeeHereWithMetadata()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("NothingToSeeHereWithMetadata", ArgumentTypes_3503f77eddf34694a7c4240c12b5eac7);
            return (Task<ApiResponse<User>>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_4e1875d3185242d3b9022bb51787d3d5 = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task<ApiResponse<User>> IGitHubApi.GetUserWithMetadata(string userName)
        {
            var arguments = new object[] { userName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUserWithMetadata", ArgumentTypes_4e1875d3185242d3b9022bb51787d3d5);
            return (Task<ApiResponse<User>>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_73aa5c1516034da5b5be26b37ef05ce5 = new Type[] { typeof(string) };

        /// <inheritdoc />
        IObservable<ApiResponse<User>> IGitHubApi.GetUserObservableWithMetadata(string userName)
        {
            var arguments = new object[] { userName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUserObservableWithMetadata", ArgumentTypes_73aa5c1516034da5b5be26b37ef05ce5);
            return (IObservable<ApiResponse<User>>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_8047d2aac080409682eb919d9cbd4aa2 = new Type[] { typeof(User) };

        /// <inheritdoc />
        Task<User> IGitHubApi.CreateUser(User user)
        {
            var arguments = new object[] { user };
            var func = requestBuilder.BuildRestResultFuncForMethod("CreateUser", ArgumentTypes_8047d2aac080409682eb919d9cbd4aa2);
            return (Task<User>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_f9b299236b14499c84997b0c46fe7f4f = new Type[] { typeof(User) };

        /// <inheritdoc />
        Task<ApiResponse<User>> IGitHubApi.CreateUserWithMetadata(User user)
        {
            var arguments = new object[] { user };
            var func = requestBuilder.BuildRestResultFuncForMethod("CreateUserWithMetadata", ArgumentTypes_f9b299236b14499c84997b0c46fe7f4f);
            return (Task<ApiResponse<User>>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIHttpBinApi<TResponse, TParam, THeader>
     : IHttpBinApi<TResponse, TParam, THeader>
        where TResponse : class
        where THeader : struct

    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIHttpBinApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_7462d234985c4b138baf92b6009294be = new Type[] { typeof(TParam), typeof(THeader) };

        /// <inheritdoc />
        Task<TResponse> IHttpBinApi<TResponse, TParam, THeader>.Get(TParam param, THeader header)
        {
            var arguments = new object[] { param, header };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_7462d234985c4b138baf92b6009294be);
            return (Task<TResponse>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_73d40996634b46319b667ddf93abc1aa = new Type[] { typeof(TParam) };

        /// <inheritdoc />
        Task<TResponse> IHttpBinApi<TResponse, TParam, THeader>.GetQuery(TParam param)
        {
            var arguments = new object[] { param };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetQuery", ArgumentTypes_73d40996634b46319b667ddf93abc1aa);
            return (Task<TResponse>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_e6f82073b1f1401c8456163eb281d42c = new Type[] { typeof(TParam) };

        /// <inheritdoc />
        Task<TResponse> IHttpBinApi<TResponse, TParam, THeader>.PostQuery(TParam param)
        {
            var arguments = new object[] { param };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostQuery", ArgumentTypes_e6f82073b1f1401c8456163eb281d42c);
            return (Task<TResponse>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_aa587154de2d4f48a95a09945b8e4170 = new Type[] { typeof(TParam) };

        /// <inheritdoc />
        Task<TResponse> IHttpBinApi<TResponse, TParam, THeader>.GetQueryWithIncludeParameterName(TParam param)
        {
            var arguments = new object[] { param };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetQueryWithIncludeParameterName", ArgumentTypes_aa587154de2d4f48a95a09945b8e4170);
            return (Task<TResponse>)func(Client, arguments);
        }

        private static class TypeHelper_615f12a0486b46839c98dc067a2d61ec<TValue>
        {
            public static readonly Type[] ArgumentTypes = new Type[] { typeof(TParam) };
            public static readonly Type[] TypeParameters = new Type[] { typeof(TValue) };
        }

        /// <inheritdoc />
        Task<TValue> IHttpBinApi<TResponse, TParam, THeader>.GetQuery1<TValue>(TParam param)
        {
            var arguments = new object[] { param };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetQuery1", TypeHelper_615f12a0486b46839c98dc067a2d61ec<TValue>.ArgumentTypes, TypeHelper_615f12a0486b46839c98dc067a2d61ec<TValue>.TypeParameters);
            return (Task<TValue>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIHttpContentApi : IHttpContentApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIHttpContentApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_e2ea08a6e5e54463b53c344dccc24ddf = new Type[] { typeof(HttpContent) };

        /// <inheritdoc />
        Task<HttpContent> IHttpContentApi.PostFileUpload(HttpContent content)
        {
            var arguments = new object[] { content };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostFileUpload", ArgumentTypes_e2ea08a6e5e54463b53c344dccc24ddf);
            return (Task<HttpContent>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_64a4bcba5e804b858f44ccb5f9986393 = new Type[] { typeof(HttpContent) };

        /// <inheritdoc />
        Task<ApiResponse<HttpContent>> IHttpContentApi.PostFileUploadWithMetadata(HttpContent content)
        {
            var arguments = new object[] { content };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostFileUploadWithMetadata", ArgumentTypes_64a4bcba5e804b858f44ccb5f9986393);
            return (Task<ApiResponse<HttpContent>>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Net.Http.Headers;
    using global::System.Text;
    using global::System.Text.Json;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::RichardSzalay.MockHttp;
    using global::Refit;
    using global::Refit.Buffers;
    using global::Xunit;
    using JsonSerializer =  global::Newtonsoft.Json.JsonSerializer;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedResponseTestsIMyAliasService : ResponseTests.IMyAliasService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedResponseTestsIMyAliasService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_76e470c0d0c0470b94ef7d43f6ba67d4 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<TestAliasObject> ResponseTests.IMyAliasService.GetTestObject()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("GetTestObject", ArgumentTypes_76e470c0d0c0470b94ef7d43f6ba67d4);
            return (Task<TestAliasObject>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::RichardSzalay.MockHttp;
    using global::Refit;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedAuthenticatedClientHandlerTestsIMyAuthenticatedService : AuthenticatedClientHandlerTests.IMyAuthenticatedService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedAuthenticatedClientHandlerTestsIMyAuthenticatedService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_bfaaaf9ef3994a84ac6724945bfa21d5 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string> AuthenticatedClientHandlerTests.IMyAuthenticatedService.GetUnauthenticated()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUnauthenticated", ArgumentTypes_bfaaaf9ef3994a84ac6724945bfa21d5);
            return (Task<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_731b09ad02d4473ab9dea4516f49a7ff = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string> AuthenticatedClientHandlerTests.IMyAuthenticatedService.GetAuthenticated()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAuthenticated", ArgumentTypes_731b09ad02d4473ab9dea4516f49a7ff);
            return (Task<string>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using SomeType =  global::CollisionA.SomeType;
    using global::CollisionB;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedINamespaceCollisionApi : INamespaceCollisionApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedINamespaceCollisionApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_63b43004cd89457b8ecf74cb77cc5f97 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<SomeType> INamespaceCollisionApi.SomeRequest()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("SomeRequest", ArgumentTypes_63b43004cd89457b8ecf74cb77cc5f97);
            return (Task<SomeType>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Threading.Tasks;
    using global::Common.Helper;
    using global::Refit.Tests.Common;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedINamespaceOverlapApi : INamespaceOverlapApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedINamespaceOverlapApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_e856e1ac33e4458d8c313597017b1350 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<SomeOtherType> INamespaceOverlapApi.SomeRequest()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("SomeRequest", ArgumentTypes_e856e1ac33e4458d8c313597017b1350);
            return (Task<SomeOtherType>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Net.Http;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Refit;
    using static global::System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedTestNestedINestedGitHubApi : TestNested.INestedGitHubApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedTestNestedINestedGitHubApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_61a0872b3fde4c9bb0eabecadeb53eb5 = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task<User> TestNested.INestedGitHubApi.GetUser(string userName)
        {
            var arguments = new object[] { userName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUser", ArgumentTypes_61a0872b3fde4c9bb0eabecadeb53eb5);
            return (Task<User>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_3b9da3c2726f46979e37ff575a9a0794 = new Type[] { typeof(string) };

        /// <inheritdoc />
        IObservable<User> TestNested.INestedGitHubApi.GetUserObservable(string userName)
        {
            var arguments = new object[] { userName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUserObservable", ArgumentTypes_3b9da3c2726f46979e37ff575a9a0794);
            return (IObservable<User>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_31422dd8e33d456081e297fe3c83168b = new Type[] { typeof(string) };

        /// <inheritdoc />
        IObservable<User> TestNested.INestedGitHubApi.GetUserCamelCase(string userName)
        {
            var arguments = new object[] { userName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUserCamelCase", ArgumentTypes_31422dd8e33d456081e297fe3c83168b);
            return (IObservable<User>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_dc1b45a292724ac4ad1b3616413146cf = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task<List<User>> TestNested.INestedGitHubApi.GetOrgMembers(string orgName)
        {
            var arguments = new object[] { orgName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetOrgMembers", ArgumentTypes_dc1b45a292724ac4ad1b3616413146cf);
            return (Task<List<User>>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_3ef60de74f79404691afec75c14456be = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task<UserSearchResult> TestNested.INestedGitHubApi.FindUsers(string q)
        {
            var arguments = new object[] { q };
            var func = requestBuilder.BuildRestResultFuncForMethod("FindUsers", ArgumentTypes_3ef60de74f79404691afec75c14456be);
            return (Task<UserSearchResult>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_08687d32f5354f31affcebc1124ece68 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<HttpResponseMessage> TestNested.INestedGitHubApi.GetIndex()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("GetIndex", ArgumentTypes_08687d32f5354f31affcebc1124ece68);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_752c7fb223be4c89b39c5535d5250d5c = Array.Empty<Type>();

        /// <inheritdoc />
        IObservable<string> TestNested.INestedGitHubApi.GetIndexObservable()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("GetIndexObservable", ArgumentTypes_752c7fb223be4c89b39c5535d5250d5c);
            return (IObservable<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_8ecd080fbb864c6ca5c950f638a0a9a9 = Array.Empty<Type>();

        /// <inheritdoc />
        Task TestNested.INestedGitHubApi.NothingToSeeHere()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("NothingToSeeHere", ArgumentTypes_8ecd080fbb864c6ca5c950f638a0a9a9);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.CodeAnalysis;
    using global::Microsoft.CodeAnalysis.CSharp;
    using global::Microsoft.CodeAnalysis.CSharp.Syntax;
    using global::Refit;
    using global::Refit.Generator;
    using global::Xunit;
    using Task =  global::System.Threading.Tasks.Task;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedINonGenericInterfaceWithGenericMethod : INonGenericInterfaceWithGenericMethod
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedINonGenericInterfaceWithGenericMethod(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static class TypeHelper_91379a84f25140deb11fa9ecc447450d<T>
        {
            public static readonly Type[] ArgumentTypes = new Type[] { typeof(T) };
            public static readonly Type[] TypeParameters = new Type[] { typeof(T) };
        }

        /// <inheritdoc />
        Task INonGenericInterfaceWithGenericMethod.PostMessage<T>(T message)
        {
            var arguments = new object[] { message };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostMessage", TypeHelper_91379a84f25140deb11fa9ecc447450d<T>.ArgumentTypes, TypeHelper_91379a84f25140deb11fa9ecc447450d<T>.TypeParameters);
            return (Task)func(Client, arguments);
        }

        private static class TypeHelper_e53edc8622c343ae95bd7264a78bac0e<T, U, V>
        {
            public static readonly Type[] ArgumentTypes = new Type[] { typeof(T), typeof(U), typeof(V) };
            public static readonly Type[] TypeParameters = new Type[] { typeof(T), typeof(U), typeof(V) };
        }

        /// <inheritdoc />
        Task INonGenericInterfaceWithGenericMethod.PostMessage<T, U, V>(T message, U param1, V param2)
        {
            var arguments = new object[] { message, param1, param2 };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostMessage", TypeHelper_e53edc8622c343ae95bd7264a78bac0e<T, U, V>.ArgumentTypes, TypeHelper_e53edc8622c343ae95bd7264a78bac0e<T, U, V>.TypeParameters);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedINpmJs : INpmJs
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedINpmJs(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_4b9ff09972274b34b98e679bdf2d7ed1 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<RootObject> INpmJs.GetCongruence()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("GetCongruence", ArgumentTypes_4b9ff09972274b34b98e679bdf2d7ed1);
            return (Task<RootObject>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedINullableReferenceService : INullableReferenceService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedINullableReferenceService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_e39714ce6aa94c25895ae617703cf78a = Array.Empty<Type>();

        /// <inheritdoc />
        string? INullableReferenceService.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_e39714ce6aa94c25895ae617703cf78a);
            return (string?)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedINullableValueService : INullableValueService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedINullableValueService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_cf3beb54606f442c9b1d9fd281294566 = Array.Empty<Type>();

        /// <inheritdoc />
        int? INullableValueService.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_cf3beb54606f442c9b1d9fd281294566);
            return (int?)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using ModelNamespace;
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIReducedUsingInsideNamespaceApi : IReducedUsingInsideNamespaceApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIReducedUsingInsideNamespaceApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_9c8afa49c773482aa88e01c54c2b15f4 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<SomeType> IReducedUsingInsideNamespaceApi.SomeRequest()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("SomeRequest", ArgumentTypes_9c8afa49c773482aa88e01c54c2b15f4);
            return (Task<SomeType>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIReferenceAndValueParametersService : IReferenceAndValueParametersService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIReferenceAndValueParametersService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_ac13163a88a14e2b88c41fe32af39bcf = new Type[] { ToNullable(typeof(string)), ToNullable(typeof(int)) };

        /// <inheritdoc />
        Task IReferenceAndValueParametersService.Get(string? reference, int? value)
        {
            var arguments = new object[] { reference, value };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_ac13163a88a14e2b88c41fe32af39bcf);
            return (Task)func(Client, arguments);
        }

        private static Type ToNullable(Type type) => !type.IsValueType ? type : typeof(Nullable<>).MakeGenericType(type);
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIRefitInterfaceWithStaticMethod : IRefitInterfaceWithStaticMethod
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIRefitInterfaceWithStaticMethod(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_09e9fb482d7a4a0081a02a7dfb836d45 = Array.Empty<Type>();

        /// <inheritdoc />
        Task IRefitInterfaceWithStaticMethod.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_09e9fb482d7a4a0081a02a7dfb836d45);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIRequestBin : IRequestBin
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIRequestBin(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_d15a22864af54a7e976dcf14ad5e68e8 = Array.Empty<Type>();

        /// <inheritdoc />
        Task IRequestBin.Post()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Post", ArgumentTypes_d15a22864af54a7e976dcf14ad5e68e8);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_f8e9348c171b48e7b5893e22c1a9818c = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task IRequestBin.PostRawStringDefault(string str)
        {
            var arguments = new object[] { str };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostRawStringDefault", ArgumentTypes_f8e9348c171b48e7b5893e22c1a9818c);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_52c9988566414b2faa6b577546881f63 = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task IRequestBin.PostRawStringJson(string str)
        {
            var arguments = new object[] { str };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostRawStringJson", ArgumentTypes_52c9988566414b2faa6b577546881f63);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_87eb3765a57c40cab9d7aeb304387ef5 = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task IRequestBin.PostRawStringUrlEncoded(string str)
        {
            var arguments = new object[] { str };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostRawStringUrlEncoded", ArgumentTypes_87eb3765a57c40cab9d7aeb304387ef5);
            return (Task)func(Client, arguments);
        }

        private static class TypeHelper_8d0d4ee30d3845749ceb8bfd11caf4e3<T>
        {
            public static readonly Type[] ArgumentTypes = new Type[] { typeof(T) };
            public static readonly Type[] TypeParameters = new Type[] { typeof(T) };
        }

        /// <inheritdoc />
        Task IRequestBin.PostGeneric<T>(T param)
        {
            var arguments = new object[] { param };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostGeneric", TypeHelper_8d0d4ee30d3845749ceb8bfd11caf4e3<T>.ArgumentTypes, TypeHelper_8d0d4ee30d3845749ceb8bfd11caf4e3<T>.TypeParameters);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reflection;
    using global::System.Threading.Tasks;
    using global::Xunit;
    using global::Refit;
    using global::System.Threading;
    using global::Newtonsoft.Json;
    using global::System.Text;
    using global::System.Net.Http.Headers;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIRunscopeApi : IRunscopeApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIRunscopeApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_7ad030782b094718b7d25d64be4a9522 = new Type[] { typeof(Stream) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadStream(Stream stream)
        {
            var arguments = new object[] { stream };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadStream", ArgumentTypes_7ad030782b094718b7d25d64be4a9522);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_111763696c5d4b9581ac088e4336b758 = new Type[] { typeof(Stream) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadStreamWithCustomBoundary(Stream stream)
        {
            var arguments = new object[] { stream };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadStreamWithCustomBoundary", ArgumentTypes_111763696c5d4b9581ac088e4336b758);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_96e8812a28b5432ea3ddc69f4ffc218f = new Type[] { typeof(StreamPart) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadStreamPart(StreamPart stream)
        {
            var arguments = new object[] { stream };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadStreamPart", ArgumentTypes_96e8812a28b5432ea3ddc69f4ffc218f);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_86594e83435c4663b3afbe5d9e95c0f1 = new Type[] { typeof(ModelObject), typeof(StreamPart) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadStreamPart(ModelObject someQueryParams, StreamPart stream)
        {
            var arguments = new object[] { someQueryParams, stream };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadStreamPart", ArgumentTypes_86594e83435c4663b3afbe5d9e95c0f1);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_f1eda21b7753499aa811dc46f11fa7a1 = new Type[] { typeof(byte[]) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadBytes(byte[] bytes)
        {
            var arguments = new object[] { bytes };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadBytes", ArgumentTypes_f1eda21b7753499aa811dc46f11fa7a1);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_9ab437657b834a6d9350ecd1feec740d = new Type[] { typeof(ByteArrayPart) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadBytesPart(ByteArrayPart bytes)
        {
            var arguments = new object[] { bytes };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadBytesPart", ArgumentTypes_9ab437657b834a6d9350ecd1feec740d);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_b74c8c9978134656887602ad1b07f9a9 = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadString(string someString)
        {
            var arguments = new object[] { someString };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadString", ArgumentTypes_b74c8c9978134656887602ad1b07f9a9);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_9e3b885f46c44c579881bd00bce76638 = new Type[] { typeof(IEnumerable<FileInfo>), typeof(FileInfo) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadFileInfo(IEnumerable<FileInfo> fileInfos, FileInfo anotherFile)
        {
            var arguments = new object[] { fileInfos, anotherFile };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadFileInfo", ArgumentTypes_9e3b885f46c44c579881bd00bce76638);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_a8ecfda03cca43d9ba4c5418e5cd1477 = new Type[] { typeof(IEnumerable<FileInfoPart>), typeof(FileInfoPart) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadFileInfoPart(IEnumerable<FileInfoPart> fileInfos, FileInfoPart anotherFile)
        {
            var arguments = new object[] { fileInfos, anotherFile };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadFileInfoPart", ArgumentTypes_a8ecfda03cca43d9ba4c5418e5cd1477);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_b06da44a5a0646ffa8419d53a34d1b8a = new Type[] { typeof(ModelObject) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadJsonObject(ModelObject theObject)
        {
            var arguments = new object[] { theObject };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadJsonObject", ArgumentTypes_b06da44a5a0646ffa8419d53a34d1b8a);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_5f5773e943084c51a4b6fa8e416cfd24 = new Type[] { typeof(IEnumerable<ModelObject>) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadJsonObjects(IEnumerable<ModelObject> theObjects)
        {
            var arguments = new object[] { theObjects };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadJsonObjects", ArgumentTypes_5f5773e943084c51a4b6fa8e416cfd24);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_03b0f872e384449ea1e78d41aaf986a9 = new Type[] { typeof(IEnumerable<ModelObject>), typeof(AnotherModel), typeof(FileInfo), typeof(AnEnum), typeof(string), typeof(int) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadMixedObjects(IEnumerable<ModelObject> theObjects, AnotherModel anotherModel, FileInfo aFile, AnEnum anEnum, string aString, int anInt)
        {
            var arguments = new object[] { theObjects, anotherModel, aFile, anEnum, aString, anInt };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadMixedObjects", ArgumentTypes_03b0f872e384449ea1e78d41aaf986a9);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_0b1a5cfe5c3c46d48f1bf824495725c3 = new Type[] { typeof(HttpContent) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadHttpContent(HttpContent content)
        {
            var arguments = new object[] { content };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadHttpContent", ArgumentTypes_0b1a5cfe5c3c46d48f1bf824495725c3);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }
    }
}

namespace AutoGeneratedIServiceWithoutNamespace
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIServiceWithoutNamespace : IServiceWithoutNamespace
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIServiceWithoutNamespace(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_949f9ab6756342ab9ea1958145c53f18 = Array.Empty<Type>();

        /// <inheritdoc />
        Task IServiceWithoutNamespace.GetRoot()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("GetRoot", ArgumentTypes_949f9ab6756342ab9ea1958145c53f18);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_99caddf7906f445ab8fa142da1921cfc = Array.Empty<Type>();

        /// <inheritdoc />
        Task IServiceWithoutNamespace.PostRoot()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("PostRoot", ArgumentTypes_99caddf7906f445ab8fa142da1921cfc);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIStreamApi : IStreamApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIStreamApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_5287b6b604ff426e8209a100f88a6c25 = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task<Stream> IStreamApi.GetRemoteFile(string filename)
        {
            var arguments = new object[] { filename };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetRemoteFile", ArgumentTypes_5287b6b604ff426e8209a100f88a6c25);
            return (Task<Stream>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_d46f4ea5b7c64198aa3a3cbc775947c1 = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task<ApiResponse<Stream>> IStreamApi.GetRemoteFileWithMetadata(string filename)
        {
            var arguments = new object[] { filename };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetRemoteFileWithMetadata", ArgumentTypes_d46f4ea5b7c64198aa3a3cbc775947c1);
            return (Task<ApiResponse<Stream>>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedITrimTrailingForwardSlashApi : ITrimTrailingForwardSlashApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedITrimTrailingForwardSlashApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_3083b3aad308413899523930a416c5b6 = Array.Empty<Type>();

        /// <inheritdoc />
        Task ITrimTrailingForwardSlashApi.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_3083b3aad308413899523930a416c5b6);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::CollisionA;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedITypeCollisionApiA : ITypeCollisionApiA
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedITypeCollisionApiA(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_01f48a7fae8b497c9061f12ac3c319a9 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<SomeType> ITypeCollisionApiA.SomeARequest()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("SomeARequest", ArgumentTypes_01f48a7fae8b497c9061f12ac3c319a9);
            return (Task<SomeType>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::CollisionB;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedITypeCollisionApiB : ITypeCollisionApiB
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedITypeCollisionApiB(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_ee4a61a3e7de48b3a12306c0352799f3 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<SomeType> ITypeCollisionApiB.SomeBRequest()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("SomeBRequest", ArgumentTypes_ee4a61a3e7de48b3a12306c0352799f3);
            return (Task<SomeType>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Threading.Tasks;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIUseOverloadedGenericMethods<TResponse, TParam, THeader>
     : IUseOverloadedGenericMethods<TResponse, TParam, THeader>
        where TResponse : class
        where THeader : struct

    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIUseOverloadedGenericMethods(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_0c4a709b33334ff0bf8e879f15e0ae4b = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string> IUseOverloadedGenericMethods<TResponse, TParam, THeader>.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_0c4a709b33334ff0bf8e879f15e0ae4b);
            return (Task<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_4773ee533d8c47f1ade3bb2c983512b2 = new Type[] { typeof(TParam), typeof(THeader) };

        /// <inheritdoc />
        Task<TResponse> IUseOverloadedGenericMethods<TResponse, TParam, THeader>.Get(TParam param, THeader header)
        {
            var arguments = new object[] { param, header };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_4773ee533d8c47f1ade3bb2c983512b2);
            return (Task<TResponse>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_ef629becf89b4b4983ca601d307c7a55 = new Type[] { typeof(THeader), typeof(TParam) };

        /// <inheritdoc />
        Task<TResponse> IUseOverloadedGenericMethods<TResponse, TParam, THeader>.Get(THeader param, TParam header)
        {
            var arguments = new object[] { param, header };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_ef629becf89b4b4983ca601d307c7a55);
            return (Task<TResponse>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_d48c8988432c450183852d7cabdef1a9 = new Type[] { typeof(int) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IUseOverloadedGenericMethods<TResponse, TParam, THeader>.Get(int httpstatuscode)
        {
            var arguments = new object[] { httpstatuscode };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_d48c8988432c450183852d7cabdef1a9);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static class TypeHelper_675e16dbe2db433baa1d534d8f836ce2<TValue>
        {
            public static readonly Type[] ArgumentTypes = new Type[] { typeof(int) };
            public static readonly Type[] TypeParameters = new Type[] { typeof(TValue) };
        }

        /// <inheritdoc />
        Task<TValue> IUseOverloadedGenericMethods<TResponse, TParam, THeader>.Get<TValue>(int someVal)
        {
            var arguments = new object[] { someVal };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", TypeHelper_675e16dbe2db433baa1d534d8f836ce2<TValue>.ArgumentTypes, TypeHelper_675e16dbe2db433baa1d534d8f836ce2<TValue>.TypeParameters);
            return (Task<TValue>)func(Client, arguments);
        }

        private static class TypeHelper_531f6c2269294e40b1eb070dda401682<TValue, TInput>
        {
            public static readonly Type[] ArgumentTypes = new Type[] { typeof(TInput) };
            public static readonly Type[] TypeParameters = new Type[] { typeof(TValue), typeof(TInput) };
        }

        /// <inheritdoc />
        Task<TValue> IUseOverloadedGenericMethods<TResponse, TParam, THeader>.Get<TValue, TInput>(TInput input)
        {
            var arguments = new object[] { input };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", TypeHelper_531f6c2269294e40b1eb070dda401682<TValue, TInput>.ArgumentTypes, TypeHelper_531f6c2269294e40b1eb070dda401682<TValue, TInput>.TypeParameters);
            return (Task<TValue>)func(Client, arguments);
        }

        private static class TypeHelper_c9290c092dbb4619aa01a61aa6828c2f<TInput1, TInput2>
        {
            public static readonly Type[] ArgumentTypes = new Type[] { typeof(TInput1), typeof(TInput2) };
            public static readonly Type[] TypeParameters = new Type[] { typeof(TInput1), typeof(TInput2) };
        }

        /// <inheritdoc />
        Task IUseOverloadedGenericMethods<TResponse, TParam, THeader>.Get<TInput1, TInput2>(TInput1 input1, TInput2 input2)
        {
            var arguments = new object[] { input1, input2 };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", TypeHelper_c9290c092dbb4619aa01a61aa6828c2f<TInput1, TInput2>.ArgumentTypes, TypeHelper_c9290c092dbb4619aa01a61aa6828c2f<TInput1, TInput2>.TypeParameters);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Threading.Tasks;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIUseOverloadedMethods : IUseOverloadedMethods
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIUseOverloadedMethods(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_e89279e885694515af82c9ddc6e1e41b = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string> IUseOverloadedMethods.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_e89279e885694515af82c9ddc6e1e41b);
            return (Task<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_52dd3591d6e74383bc306034302db31b = new Type[] { typeof(int) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IUseOverloadedMethods.Get(int httpstatuscode)
        {
            var arguments = new object[] { httpstatuscode };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_52dd3591d6e74383bc306034302db31b);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIValidApi : IValidApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIValidApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_6fe686927009464d819f516b3ef388c2 = Array.Empty<Type>();

        /// <inheritdoc />
        Task IValidApi.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_6fe686927009464d819f516b3ef388c2);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::Refit.Tests.SomeNamespace;
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedNamespaceWithGlobalAliasApi : NamespaceWithGlobalAliasApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedNamespaceWithGlobalAliasApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_8063544d1af84f46a59af3634f783f11 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<SomeType> NamespaceWithGlobalAliasApi.SomeRequest()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("SomeRequest", ArgumentTypes_8063544d1af84f46a59af3634f783f11);
            return (Task<SomeType>)func(Client, arguments);
        }
    }
}

#pragma warning restore CS8632 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.
#pragma warning restore CS8669 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.
