// <auto-generated />
using System;
using System.Net.Http;
using System.Collections.Generic;
using Refit.Tests.RefitInternalGenerated;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#pragma warning disable
namespace Refit.Tests.RefitInternalGenerated
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {

        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}
#pragma warning restore

#pragma warning disable CS8632 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.
#pragma warning disable CS8669 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.
namespace Refit.Tests
{
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.CodeAnalysis;
    using global::Microsoft.CodeAnalysis.CSharp;
    using global::Microsoft.CodeAnalysis.CSharp.Syntax;
    using global::Refit;
    using global::Refit.Generator;
    using global::Xunit;
    using Task =  global::System.Threading.Tasks.Task;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIAmARefitInterfaceButNobodyUsesMe : IAmARefitInterfaceButNobodyUsesMe
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIAmARefitInterfaceButNobodyUsesMe(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_4fb19815237f4083aadaa0e9d139923a = Array.Empty<Type>();

        /// <inheritdoc />
        Task IAmARefitInterfaceButNobodyUsesMe.RefitMethod()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("RefitMethod", ArgumentTypes_4fb19815237f4083aadaa0e9d139923a);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_637b6166889d449d96660eac092e89be = Array.Empty<Type>();

        /// <inheritdoc />
        Task IAmARefitInterfaceButNobodyUsesMe.AnotherRefitMethod()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("AnotherRefitMethod", ArgumentTypes_637b6166889d449d96660eac092e89be);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_dd92f177b0cd4e1780f9d80413ee9285 = Array.Empty<Type>();

        /// <inheritdoc />
        Task IAmARefitInterfaceButNobodyUsesMe.NoConstantsAllowed()
        {
            throw new NotImplementedException("Either this method has no Refit HTTP method attribute or you've used something other than a string literal for the 'path' argument.");
        }

        private static readonly Type[] ArgumentTypes_ba12e6f238b744aa843514408c8ecb94 = Array.Empty<Type>();

        /// <inheritdoc />
        Task IAmARefitInterfaceButNobodyUsesMe.SpacesShouldntBreakMe()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("SpacesShouldntBreakMe", ArgumentTypes_ba12e6f238b744aa843514408c8ecb94);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_259d311143c64903a53c695901542d74 = new Type[] { typeof(int), typeof(string), typeof(float) };

        /// <inheritdoc />
        Task IAmARefitInterfaceButNobodyUsesMe.ReservedWordsForParameterNames(int @int, string @string, float @long)
        {
            var arguments = new object[] { @int, @string, @long };
            var func = requestBuilder.BuildRestResultFuncForMethod("ReservedWordsForParameterNames", ArgumentTypes_259d311143c64903a53c695901542d74);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIAmHalfRefit : IAmHalfRefit
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIAmHalfRefit(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_a1bfd88146a74e30b600b1a105eecd37 = Array.Empty<Type>();

        /// <inheritdoc />
        Task IAmHalfRefit.Post()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Post", ArgumentTypes_a1bfd88146a74e30b600b1a105eecd37);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_7fe6a45f0b1545fcbba87105c549a3f0 = Array.Empty<Type>();

        /// <inheritdoc />
        Task IAmHalfRefit.Get()
        {
            throw new NotImplementedException("Either this method has no Refit HTTP method attribute or you've used something other than a string literal for the 'path' argument.");
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;
    using static global::System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIAmInterface : IAmInterface
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIAmInterface(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_24b200c4c8794bcbbdb8ab833f1fc9f3 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string> IAmInterface.Pang()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Pang", ArgumentTypes_24b200c4c8794bcbbdb8ab833f1fc9f3);
            return (Task<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_e480a487229b4618904a42e0883b2acc = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string> IAmInterfaceB.Pong()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Pong", ArgumentTypes_e480a487229b4618904a42e0883b2acc);
            return (Task<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_6abcae130331449b8da132ecfd447599 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string> IAmInterfaceD.Test()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Test", ArgumentTypes_6abcae130331449b8da132ecfd447599);
            return (Task<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_94d0f3c718b341f7a13222052d61f29d = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string> IAmInterfaceA.Ping()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Ping", ArgumentTypes_94d0f3c718b341f7a13222052d61f29d);
            return (Task<string>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;
    using static global::System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIAmInterfaceA : IAmInterfaceA
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIAmInterfaceA(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_dfc7ac031c9b41ce87a8c096a1974585 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string> IAmInterfaceA.Ping()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Ping", ArgumentTypes_dfc7ac031c9b41ce87a8c096a1974585);
            return (Task<string>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;
    using static global::System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIAmInterfaceB : IAmInterfaceB
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIAmInterfaceB(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_ed4e46d8dca547029fbe593b603067d5 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string> IAmInterfaceB.Pong()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Pong", ArgumentTypes_ed4e46d8dca547029fbe593b603067d5);
            return (Task<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_e4c334d2aa86452290a4de8ab1456fac = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string> IAmInterfaceD.Test()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Test", ArgumentTypes_e4c334d2aa86452290a4de8ab1456fac);
            return (Task<string>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;
    using static global::System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIAmInterfaceC : IAmInterfaceC
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIAmInterfaceC(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_154e2c89eb504b2cbb7b87b5b36447cf = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string> IAmInterfaceC.Pang()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Pang", ArgumentTypes_154e2c89eb504b2cbb7b87b5b36447cf);
            return (Task<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_7f1f55a4ba604ef59ce68f86dd43c054 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string> IAmInterfaceB.Pong()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Pong", ArgumentTypes_7f1f55a4ba604ef59ce68f86dd43c054);
            return (Task<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_0fe0ec6439b24c9a95a10f38d2775888 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string> IAmInterfaceD.Test()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Test", ArgumentTypes_0fe0ec6439b24c9a95a10f38d2775888);
            return (Task<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_002781729c25445d9b091c3280a2bcfa = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string> IAmInterfaceA.Ping()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Ping", ArgumentTypes_002781729c25445d9b091c3280a2bcfa);
            return (Task<string>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;
    using static global::System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIAmInterfaceD : IAmInterfaceD
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIAmInterfaceD(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_2ee9e800678d408c8741623c6218569a = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string> IAmInterfaceD.Test()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Test", ArgumentTypes_2ee9e800678d408c8741623c6218569a);
            return (Task<string>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIApiBindPathToObject : IApiBindPathToObject
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIApiBindPathToObject(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_4439ab0a18c942cfbf1a78a8cf1c369e = new Type[] { typeof(PathBoundObject) };

        /// <inheritdoc />
        Task IApiBindPathToObject.GetFooBars(PathBoundObject request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFooBars", ArgumentTypes_4439ab0a18c942cfbf1a78a8cf1c369e);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_20a6706f07e644c0a9882ac2d82b87c2 = new Type[] { typeof(PathBoundObject) };

        /// <inheritdoc />
        Task IApiBindPathToObject.GetFooBarsWithDifferentCasing(PathBoundObject requestParams)
        {
            var arguments = new object[] { requestParams };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFooBarsWithDifferentCasing", ArgumentTypes_20a6706f07e644c0a9882ac2d82b87c2);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_ecaef8a57023448dbb863be670120b91 = new Type[] { typeof(string), typeof(PathBoundObject) };

        /// <inheritdoc />
        Task IApiBindPathToObject.GetBarsByFoo(string id, PathBoundObject request)
        {
            var arguments = new object[] { id, request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetBarsByFoo", ArgumentTypes_ecaef8a57023448dbb863be670120b91);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_251481b0763d4dacba93e893e93c8203 = new Type[] { typeof(PathBoundObject), typeof(string) };

        /// <inheritdoc />
        Task IApiBindPathToObject.GetFooBars(PathBoundObject request, string someProperty)
        {
            var arguments = new object[] { request, someProperty };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFooBars", ArgumentTypes_251481b0763d4dacba93e893e93c8203);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_8393ae7b048642af81659f368c83a742 = new Type[] { typeof(PathBoundObject) };

        /// <inheritdoc />
        Task IApiBindPathToObject.GetBarsByFoo(PathBoundObject request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetBarsByFoo", ArgumentTypes_8393ae7b048642af81659f368c83a742);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_184f27dfd30c4698ab0600878c78cee7 = new Type[] { typeof(PathBoundObjectWithQueryFormat) };

        /// <inheritdoc />
        Task IApiBindPathToObject.GetBarsWithCustomQueryFormat(PathBoundObjectWithQueryFormat request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetBarsWithCustomQueryFormat", ArgumentTypes_184f27dfd30c4698ab0600878c78cee7);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_f934d9a64f044ca89d81e449866f17ca = new Type[] { typeof(PathBoundDerivedObject) };

        /// <inheritdoc />
        Task IApiBindPathToObject.GetFooBarsDerived(PathBoundDerivedObject request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFooBarsDerived", ArgumentTypes_f934d9a64f044ca89d81e449866f17ca);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_d099f5dc885044628ba1071b0e13fa92 = new Type[] { typeof(PathBoundList) };

        /// <inheritdoc />
        Task IApiBindPathToObject.GetFoos(PathBoundList request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFoos", ArgumentTypes_d099f5dc885044628ba1071b0e13fa92);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_237c9bc2a4014803a1aad965a0bfacd4 = new Type[] { typeof(List<int>) };

        /// <inheritdoc />
        Task IApiBindPathToObject.GetFoos2(List<int> Values)
        {
            var arguments = new object[] { Values };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFoos2", ArgumentTypes_237c9bc2a4014803a1aad965a0bfacd4);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_1137f2df6a4d497c97b6aa56155114fc = new Type[] { typeof(PathBoundObject), typeof(object) };

        /// <inheritdoc />
        Task IApiBindPathToObject.PostFooBar(PathBoundObject request, object someObject)
        {
            var arguments = new object[] { request, someObject };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostFooBar", ArgumentTypes_1137f2df6a4d497c97b6aa56155114fc);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_8da75a0a7919494fabfbfa253b1b3ced = new Type[] { typeof(PathBoundObjectWithQuery) };

        /// <inheritdoc />
        Task IApiBindPathToObject.GetFooBars(PathBoundObjectWithQuery request)
        {
            var arguments = new object[] { request };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetFooBars", ArgumentTypes_8da75a0a7919494fabfbfa253b1b3ced);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_ecedec4c78584237987d9538c184fcdb = new Type[] { typeof(PathBoundObject), typeof(ModelObject) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IApiBindPathToObject.PostFooBar(PathBoundObject request, ModelObject someQueryParams)
        {
            var arguments = new object[] { request, someQueryParams };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostFooBar", ArgumentTypes_ecedec4c78584237987d9538c184fcdb);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_3de46d1ae5ae42acbbdd3f612bdc6510 = new Type[] { typeof(PathBoundObject), typeof(ModelObject), typeof(StreamPart) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IApiBindPathToObject.PostFooBarStreamPart(PathBoundObject request, ModelObject someQueryParams, StreamPart stream)
        {
            var arguments = new object[] { request, someQueryParams, stream };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostFooBarStreamPart", ArgumentTypes_3de46d1ae5ae42acbbdd3f612bdc6510);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_7ea8d330058b418c9250d4b518b5fbe4 = new Type[] { typeof(PathBoundObject), typeof(StreamPart) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IApiBindPathToObject.PostFooBarStreamPart(PathBoundObject request, StreamPart stream)
        {
            var arguments = new object[] { request, stream };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostFooBarStreamPart", ArgumentTypes_7ea8d330058b418c9250d4b518b5fbe4);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_260b14b341dd4afe855224519ce6509c = new Type[] { typeof(PathBoundObjectWithQuery), typeof(StreamPart) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IApiBindPathToObject.PostFooBarStreamPart(PathBoundObjectWithQuery request, StreamPart stream)
        {
            var arguments = new object[] { request, stream };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostFooBarStreamPart", ArgumentTypes_260b14b341dd4afe855224519ce6509c);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIApiWithDecimal : IApiWithDecimal
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIApiWithDecimal(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_6980f39ffbca4f5cb3749aa20b3c451c = new Type[] { typeof(decimal) };

        /// <inheritdoc />
        Task<string> IApiWithDecimal.GetWithDecimal(decimal value)
        {
            var arguments = new object[] { value };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetWithDecimal", ArgumentTypes_6980f39ffbca4f5cb3749aa20b3c451c);
            return (Task<string>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIBodylessApi : IBodylessApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIBodylessApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_b0a77551c5274e76812b32ec0075e236 = Array.Empty<Type>();

        /// <inheritdoc />
        Task IBodylessApi.Post()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Post", ArgumentTypes_b0a77551c5274e76812b32ec0075e236);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_4004bba546244c06a0553b5d85f7d71a = Array.Empty<Type>();

        /// <inheritdoc />
        Task IBodylessApi.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_4004bba546244c06a0553b5d85f7d71a);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_fadada51c0cb4f63aa4cab15be7fd49f = Array.Empty<Type>();

        /// <inheritdoc />
        Task IBodylessApi.Head()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Head", ArgumentTypes_fadada51c0cb4f63aa4cab15be7fd49f);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.CodeAnalysis;
    using global::Microsoft.CodeAnalysis.CSharp;
    using global::Microsoft.CodeAnalysis.CSharp.Syntax;
    using global::Refit;
    using global::Refit.Generator;
    using global::Xunit;
    using Task =  global::System.Threading.Tasks.Task;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIBoringCrudApi<T, TKey>
     : IBoringCrudApi<T, TKey>
        where T : class

    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIBoringCrudApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_2a704134ef5c49289a848760bccee135 = new Type[] { typeof(T) };

        /// <inheritdoc />
        Task<T> IBoringCrudApi<T, TKey>.Create(T paylod)
        {
            var arguments = new object[] { paylod };
            var func = requestBuilder.BuildRestResultFuncForMethod("Create", ArgumentTypes_2a704134ef5c49289a848760bccee135);
            return (Task<T>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_1de36d1330ac45f9ad2a08d53ea90a48 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<List<T>> IBoringCrudApi<T, TKey>.ReadAll()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadAll", ArgumentTypes_1de36d1330ac45f9ad2a08d53ea90a48);
            return (Task<List<T>>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_d676e76ac308420bb9198aa340d27cc5 = new Type[] { typeof(TKey) };

        /// <inheritdoc />
        Task<T> IBoringCrudApi<T, TKey>.ReadOne(TKey key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadOne", ArgumentTypes_d676e76ac308420bb9198aa340d27cc5);
            return (Task<T>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_75bfaa13654a4ef1b3913af2529e05dd = new Type[] { typeof(TKey), typeof(T) };

        /// <inheritdoc />
        Task IBoringCrudApi<T, TKey>.Update(TKey key, T payload)
        {
            var arguments = new object[] { key, payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", ArgumentTypes_75bfaa13654a4ef1b3913af2529e05dd);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_fdfe30cefb4f44f9bcb13c1ebb6ec8d7 = new Type[] { typeof(TKey) };

        /// <inheritdoc />
        Task IBoringCrudApi<T, TKey>.Delete(TKey key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", ArgumentTypes_fdfe30cefb4f44f9bcb13c1ebb6ec8d7);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIBrokenWebApi : IBrokenWebApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIBrokenWebApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_98e417b1a39e4ad4a91277878626573b = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task<bool> IBrokenWebApi.PostAValue(string derp)
        {
            var arguments = new object[] { derp };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostAValue", ArgumentTypes_98e417b1a39e4ad4a91277878626573b);
            return (Task<bool>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedICustomNullableReferenceService : ICustomNullableReferenceService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedICustomNullableReferenceService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_37a38bd3b30d4febb7282bbbd6f66b15 = Array.Empty<Type>();

        /// <inheritdoc />
        CustomReferenceType? ICustomNullableReferenceService.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_37a38bd3b30d4febb7282bbbd6f66b15);
            return (CustomReferenceType?)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedICustomNullableValueService : ICustomNullableValueService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedICustomNullableValueService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_7d7e8312ad394a898376bce8c5f50fed = Array.Empty<Type>();

        /// <inheritdoc />
        CustomValueType? ICustomNullableValueService.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_7d7e8312ad394a898376bce8c5f50fed);
            return (CustomValueType?)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedICustomReferenceAndValueParametersService : ICustomReferenceAndValueParametersService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedICustomReferenceAndValueParametersService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_713bbee79cb04ff4861810f9302d2594 = new Type[] { ToNullable(typeof(CustomReferenceType)), ToNullable(typeof(CustomValueType)) };

        /// <inheritdoc />
        Task ICustomReferenceAndValueParametersService.Get(CustomReferenceType? reference, CustomValueType? value)
        {
            var arguments = new object[] { reference, value };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_713bbee79cb04ff4861810f9302d2594);
            return (Task)func(Client, arguments);
        }

        private static Type ToNullable(Type type) => !type.IsValueType ? type : typeof(Nullable<>).MakeGenericType(type);
    }
}

namespace Refit.Tests
{
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;
    using global::Refit;
    using static global::System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIDataApiA : IDataApiA
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIDataApiA(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_d6f6d60fbe8e425db60bad7342f4a6fb = Array.Empty<Type>();

        /// <inheritdoc />
        Task IDataApiA.PingA()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("PingA", ArgumentTypes_d6f6d60fbe8e425db60bad7342f4a6fb);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_b95b5e240d7c4637b90a3bde2f0add97 = new Type[] { typeof(DataEntity) };

        /// <inheritdoc />
        Task<DataEntity> IDataCrudApi<DataEntity>.Copy(DataEntity payload)
        {
            var arguments = new object[] { payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Copy", ArgumentTypes_b95b5e240d7c4637b90a3bde2f0add97);
            return (Task<DataEntity>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_c66bae15a43042e39e33b9c6270c4ea4 = new Type[] { typeof(DataEntity) };

        /// <inheritdoc />
        Task<DataEntity> IDataCrudApi<DataEntity, long>.Create(DataEntity payload)
        {
            var arguments = new object[] { payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Create", ArgumentTypes_c66bae15a43042e39e33b9c6270c4ea4);
            return (Task<DataEntity>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_a705cc637ec84a4982b4e9e38a338d59 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<List<DataEntity>> IDataCrudApi<DataEntity, long>.ReadAll()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadAll", ArgumentTypes_a705cc637ec84a4982b4e9e38a338d59);
            return (Task<List<DataEntity>>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_a12af4da19c2493db12b0daa04e4011a = new Type[] { typeof(long) };

        /// <inheritdoc />
        Task<DataEntity> IDataCrudApi<DataEntity, long>.ReadOne(long key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadOne", ArgumentTypes_a12af4da19c2493db12b0daa04e4011a);
            return (Task<DataEntity>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_9a877614fc9f4d7ba703732e35c25fc3 = new Type[] { typeof(long), typeof(DataEntity) };

        /// <inheritdoc />
        Task IDataCrudApi<DataEntity, long>.Update(long key, DataEntity payload)
        {
            var arguments = new object[] { key, payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", ArgumentTypes_9a877614fc9f4d7ba703732e35c25fc3);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_4c7707783af24f0bbcb53e2df5b2a3f6 = new Type[] { typeof(long) };

        /// <inheritdoc />
        Task IDataCrudApi<DataEntity, long>.Delete(long key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", ArgumentTypes_4c7707783af24f0bbcb53e2df5b2a3f6);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;
    using global::Refit;
    using static global::System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIDataApiB : IDataApiB
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIDataApiB(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_4d8b96ab60cc42f99e67b8763279be6a = Array.Empty<Type>();

        /// <inheritdoc />
        Task IDataApiB.PingB()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("PingB", ArgumentTypes_4d8b96ab60cc42f99e67b8763279be6a);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_ef20d6f33ba4489999617c0c87e15dad = new Type[] { typeof(DataEntity) };

        /// <inheritdoc />
        Task<DataEntity> IDataCrudApi<DataEntity, int>.Create(DataEntity payload)
        {
            var arguments = new object[] { payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Create", ArgumentTypes_ef20d6f33ba4489999617c0c87e15dad);
            return (Task<DataEntity>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_9c528ed5c2a140f0afb51bf96944ab94 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<List<DataEntity>> IDataCrudApi<DataEntity, int>.ReadAll()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadAll", ArgumentTypes_9c528ed5c2a140f0afb51bf96944ab94);
            return (Task<List<DataEntity>>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_8af99142aced4d9096165935ea35dafb = new Type[] { typeof(int) };

        /// <inheritdoc />
        Task<DataEntity> IDataCrudApi<DataEntity, int>.ReadOne(int key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadOne", ArgumentTypes_8af99142aced4d9096165935ea35dafb);
            return (Task<DataEntity>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_e4ca0729208c42108a0ce1edefd47e5e = new Type[] { typeof(int), typeof(DataEntity) };

        /// <inheritdoc />
        Task IDataCrudApi<DataEntity, int>.Update(int key, DataEntity payload)
        {
            var arguments = new object[] { key, payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", ArgumentTypes_e4ca0729208c42108a0ce1edefd47e5e);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_70214198d4db4df9b07e1bed1df36bf4 = new Type[] { typeof(int) };

        /// <inheritdoc />
        Task IDataCrudApi<DataEntity, int>.Delete(int key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", ArgumentTypes_70214198d4db4df9b07e1bed1df36bf4);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;
    using global::Refit;
    using static global::System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIDataCrudApi<T>
     : IDataCrudApi<T>
        where T : class

    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIDataCrudApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_7f40432c44834a259d3e9f20f58d129c = new Type[] { typeof(T) };

        /// <inheritdoc />
        Task<T> IDataCrudApi<T>.Copy(T payload)
        {
            var arguments = new object[] { payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Copy", ArgumentTypes_7f40432c44834a259d3e9f20f58d129c);
            return (Task<T>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_b1218505fefa442584ede68c1229d394 = new Type[] { typeof(T) };

        /// <inheritdoc />
        Task<T> IDataCrudApi<T, long>.Create(T payload)
        {
            var arguments = new object[] { payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Create", ArgumentTypes_b1218505fefa442584ede68c1229d394);
            return (Task<T>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_e73e25586826425eaf3e203f2858d700 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<List<T>> IDataCrudApi<T, long>.ReadAll()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadAll", ArgumentTypes_e73e25586826425eaf3e203f2858d700);
            return (Task<List<T>>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_639652ddf03c4d7f8d03f81d5d5503f9 = new Type[] { typeof(long) };

        /// <inheritdoc />
        Task<T> IDataCrudApi<T, long>.ReadOne(long key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadOne", ArgumentTypes_639652ddf03c4d7f8d03f81d5d5503f9);
            return (Task<T>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_ac88eb105a954ccfb02de3a44a0ecd2c = new Type[] { typeof(long), typeof(T) };

        /// <inheritdoc />
        Task IDataCrudApi<T, long>.Update(long key, T payload)
        {
            var arguments = new object[] { key, payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", ArgumentTypes_ac88eb105a954ccfb02de3a44a0ecd2c);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_a37f9d6cdcf5404684e2f280745c56b8 = new Type[] { typeof(long) };

        /// <inheritdoc />
        Task IDataCrudApi<T, long>.Delete(long key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", ArgumentTypes_a37f9d6cdcf5404684e2f280745c56b8);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Collections.Generic;
    using global::System.Threading.Tasks;
    using global::Refit;
    using static global::System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIDataCrudApi<T, TKey>
     : IDataCrudApi<T, TKey>
        where T : class

    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIDataCrudApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_ba179f443d7e47fb8904df4bd88df394 = new Type[] { typeof(T) };

        /// <inheritdoc />
        Task<T> IDataCrudApi<T, TKey>.Create(T payload)
        {
            var arguments = new object[] { payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Create", ArgumentTypes_ba179f443d7e47fb8904df4bd88df394);
            return (Task<T>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_60caf102389e4a91a959675d50a774ca = Array.Empty<Type>();

        /// <inheritdoc />
        Task<List<T>> IDataCrudApi<T, TKey>.ReadAll()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadAll", ArgumentTypes_60caf102389e4a91a959675d50a774ca);
            return (Task<List<T>>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_686151fed998404d93507a9bf9d076b9 = new Type[] { typeof(TKey) };

        /// <inheritdoc />
        Task<T> IDataCrudApi<T, TKey>.ReadOne(TKey key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("ReadOne", ArgumentTypes_686151fed998404d93507a9bf9d076b9);
            return (Task<T>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_86b49ea2ae254faf9db743cdc59769d6 = new Type[] { typeof(TKey), typeof(T) };

        /// <inheritdoc />
        Task IDataCrudApi<T, TKey>.Update(TKey key, T payload)
        {
            var arguments = new object[] { key, payload };
            var func = requestBuilder.BuildRestResultFuncForMethod("Update", ArgumentTypes_86b49ea2ae254faf9db743cdc59769d6);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_afe909d5e12f48169701abbc666807d7 = new Type[] { typeof(TKey) };

        /// <inheritdoc />
        Task IDataCrudApi<T, TKey>.Delete(TKey key)
        {
            var arguments = new object[] { key };
            var func = requestBuilder.BuildRestResultFuncForMethod("Delete", ArgumentTypes_afe909d5e12f48169701abbc666807d7);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIGenericNullableReferenceParameterService : IGenericNullableReferenceParameterService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIGenericNullableReferenceParameterService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_7c7c6e7f77b84b6bbafaeed5bbea6b8e = new Type[] { ToNullable(typeof(System.Collections.Generic.List<string>)) };

        /// <inheritdoc />
        Task IGenericNullableReferenceParameterService.Get(System.Collections.Generic.List<string>? reference)
        {
            var arguments = new object[] { reference };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_7c7c6e7f77b84b6bbafaeed5bbea6b8e);
            return (Task)func(Client, arguments);
        }

        private static Type ToNullable(Type type) => !type.IsValueType ? type : typeof(Nullable<>).MakeGenericType(type);
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIGenericNullableReferenceService : IGenericNullableReferenceService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIGenericNullableReferenceService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_ff7b9a78a4654df98a535a58ce69a33c = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string>? IGenericNullableReferenceService.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_ff7b9a78a4654df98a535a58ce69a33c);
            return (Task<string>?)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIGenericNullableValueService : IGenericNullableValueService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIGenericNullableValueService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_ddfc7be926064f83a6c969a87dfff18d = Array.Empty<Type>();

        /// <inheritdoc />
        ValueTask<int>? IGenericNullableValueService.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_ddfc7be926064f83a6c969a87dfff18d);
            return (ValueTask<int>?)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIGenericNullableWithNullableReferenceParameterService : IGenericNullableWithNullableReferenceParameterService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIGenericNullableWithNullableReferenceParameterService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_99fdc7fa8e3f465ea07359cdf0da3922 = new Type[] { ToNullable(typeof(System.Collections.Generic.List<string?>)) };

        /// <inheritdoc />
        Task IGenericNullableWithNullableReferenceParameterService.Get(System.Collections.Generic.List<string?>? reference)
        {
            var arguments = new object[] { reference };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_99fdc7fa8e3f465ea07359cdf0da3922);
            return (Task)func(Client, arguments);
        }

        private static Type ToNullable(Type type) => !type.IsValueType ? type : typeof(Nullable<>).MakeGenericType(type);
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIGenericNullableWithNullableReferenceService : IGenericNullableWithNullableReferenceService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIGenericNullableWithNullableReferenceService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_9d8c4b3dd7a34f41bd0e3d490dd38e6b = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string?>? IGenericNullableWithNullableReferenceService.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_9d8c4b3dd7a34f41bd0e3d490dd38e6b);
            return (Task<string?>?)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIGenericNullableWithNullableValueService : IGenericNullableWithNullableValueService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIGenericNullableWithNullableValueService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_85b1a39e6219474bb7a1a87a38bbd811 = Array.Empty<Type>();

        /// <inheritdoc />
        ValueTask<int?>? IGenericNullableWithNullableValueService.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_85b1a39e6219474bb7a1a87a38bbd811);
            return (ValueTask<int?>?)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIGenericWithNullableReferenceParameterService : IGenericWithNullableReferenceParameterService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIGenericWithNullableReferenceParameterService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_517dcd10f1f147709ba86c8c4dd5d30d = new Type[] { typeof(System.Collections.Generic.List<string?>) };

        /// <inheritdoc />
        Task IGenericWithNullableReferenceParameterService.Get(System.Collections.Generic.List<string?> reference)
        {
            var arguments = new object[] { reference };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_517dcd10f1f147709ba86c8c4dd5d30d);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIGenericWithNullableValueService : IGenericWithNullableValueService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIGenericWithNullableValueService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_528ad8b9430d43108c5196d25e0ec586 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<int?> IGenericWithNullableValueService.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_528ad8b9430d43108c5196d25e0ec586);
            return (Task<int?>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIGenericWithResultService : IGenericWithResultService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIGenericWithResultService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_b42079a79e7742c3817eb2a3a7958fd7 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string?> IGenericWithResultService.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_b42079a79e7742c3817eb2a3a7958fd7);
            return (Task<string?>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Net.Http;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Refit;
    using static global::System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIGitHubApi : IGitHubApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIGitHubApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_380701db2ff243599bb8953d7a54a02e = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task<User> IGitHubApi.GetUser(string userName)
        {
            var arguments = new object[] { userName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUser", ArgumentTypes_380701db2ff243599bb8953d7a54a02e);
            return (Task<User>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_a73d3db4250e49629d2b5c3010449dfa = new Type[] { typeof(string) };

        /// <inheritdoc />
        IObservable<User> IGitHubApi.GetUserObservable(string userName)
        {
            var arguments = new object[] { userName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUserObservable", ArgumentTypes_a73d3db4250e49629d2b5c3010449dfa);
            return (IObservable<User>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_3e76cea0b5724c66bd86518afcaed124 = new Type[] { typeof(string) };

        /// <inheritdoc />
        IObservable<User> IGitHubApi.GetUserCamelCase(string userName)
        {
            var arguments = new object[] { userName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUserCamelCase", ArgumentTypes_3e76cea0b5724c66bd86518afcaed124);
            return (IObservable<User>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_857528a801c94121b73ce192723553cd = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task<List<User>> IGitHubApi.GetOrgMembers(string orgName)
        {
            var arguments = new object[] { orgName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetOrgMembers", ArgumentTypes_857528a801c94121b73ce192723553cd);
            return (Task<List<User>>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_7d208f32325a4bed82f8d8cc2a954513 = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task<UserSearchResult> IGitHubApi.FindUsers(string q)
        {
            var arguments = new object[] { q };
            var func = requestBuilder.BuildRestResultFuncForMethod("FindUsers", ArgumentTypes_7d208f32325a4bed82f8d8cc2a954513);
            return (Task<UserSearchResult>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_ddb47942c76547469ae9cb35c284e424 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<HttpResponseMessage> IGitHubApi.GetIndex()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("GetIndex", ArgumentTypes_ddb47942c76547469ae9cb35c284e424);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_c198f33c1b044c7fb47b1bf540849d6b = Array.Empty<Type>();

        /// <inheritdoc />
        IObservable<string> IGitHubApi.GetIndexObservable()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("GetIndexObservable", ArgumentTypes_c198f33c1b044c7fb47b1bf540849d6b);
            return (IObservable<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_649dcccdfeef487b8cfe636370db238d = Array.Empty<Type>();

        /// <inheritdoc />
        Task<User> IGitHubApi.NothingToSeeHere()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("NothingToSeeHere", ArgumentTypes_649dcccdfeef487b8cfe636370db238d);
            return (Task<User>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_c069126551cf45cabb8930f37a4215c2 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<ApiResponse<User>> IGitHubApi.NothingToSeeHereWithMetadata()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("NothingToSeeHereWithMetadata", ArgumentTypes_c069126551cf45cabb8930f37a4215c2);
            return (Task<ApiResponse<User>>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_f1c177c2e6cb445b9affe455d7933cee = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task<ApiResponse<User>> IGitHubApi.GetUserWithMetadata(string userName)
        {
            var arguments = new object[] { userName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUserWithMetadata", ArgumentTypes_f1c177c2e6cb445b9affe455d7933cee);
            return (Task<ApiResponse<User>>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_c6bc40b397934d1dae1efd11e14fb75c = new Type[] { typeof(string) };

        /// <inheritdoc />
        IObservable<ApiResponse<User>> IGitHubApi.GetUserObservableWithMetadata(string userName)
        {
            var arguments = new object[] { userName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUserObservableWithMetadata", ArgumentTypes_c6bc40b397934d1dae1efd11e14fb75c);
            return (IObservable<ApiResponse<User>>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_474c0730998448e5bbb394450a75c15b = new Type[] { typeof(User) };

        /// <inheritdoc />
        Task<User> IGitHubApi.CreateUser(User user)
        {
            var arguments = new object[] { user };
            var func = requestBuilder.BuildRestResultFuncForMethod("CreateUser", ArgumentTypes_474c0730998448e5bbb394450a75c15b);
            return (Task<User>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_bda1749d26ab4bd39550741611cad352 = new Type[] { typeof(User) };

        /// <inheritdoc />
        Task<ApiResponse<User>> IGitHubApi.CreateUserWithMetadata(User user)
        {
            var arguments = new object[] { user };
            var func = requestBuilder.BuildRestResultFuncForMethod("CreateUserWithMetadata", ArgumentTypes_bda1749d26ab4bd39550741611cad352);
            return (Task<ApiResponse<User>>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIHttpBinApi<TResponse, TParam, THeader>
     : IHttpBinApi<TResponse, TParam, THeader>
        where TResponse : class
        where THeader : struct

    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIHttpBinApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_06193ec75cd8417fb73fc7443cf6000d = new Type[] { typeof(TParam), typeof(THeader) };

        /// <inheritdoc />
        Task<TResponse> IHttpBinApi<TResponse, TParam, THeader>.Get(TParam param, THeader header)
        {
            var arguments = new object[] { param, header };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_06193ec75cd8417fb73fc7443cf6000d);
            return (Task<TResponse>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_f7b6c47c8e074e08b396e44a4e249536 = new Type[] { typeof(TParam) };

        /// <inheritdoc />
        Task<TResponse> IHttpBinApi<TResponse, TParam, THeader>.GetQuery(TParam param)
        {
            var arguments = new object[] { param };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetQuery", ArgumentTypes_f7b6c47c8e074e08b396e44a4e249536);
            return (Task<TResponse>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_74f3692f0d014b00a5f42ca8a902f98d = new Type[] { typeof(TParam) };

        /// <inheritdoc />
        Task<TResponse> IHttpBinApi<TResponse, TParam, THeader>.PostQuery(TParam param)
        {
            var arguments = new object[] { param };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostQuery", ArgumentTypes_74f3692f0d014b00a5f42ca8a902f98d);
            return (Task<TResponse>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_41fc8f1bba9340e0833c5517b2e98b76 = new Type[] { typeof(TParam) };

        /// <inheritdoc />
        Task<TResponse> IHttpBinApi<TResponse, TParam, THeader>.GetQueryWithIncludeParameterName(TParam param)
        {
            var arguments = new object[] { param };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetQueryWithIncludeParameterName", ArgumentTypes_41fc8f1bba9340e0833c5517b2e98b76);
            return (Task<TResponse>)func(Client, arguments);
        }

        private static class TypeHelper_c6eef0dad3bb413ba537071113a625af<TValue>
        {
            public static readonly Type[] ArgumentTypes = new Type[] { typeof(TParam) };
            public static readonly Type[] TypeParameters = new Type[] { typeof(TValue) };
        }

        /// <inheritdoc />
        Task<TValue> IHttpBinApi<TResponse, TParam, THeader>.GetQuery1<TValue>(TParam param)
        {
            var arguments = new object[] { param };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetQuery1", TypeHelper_c6eef0dad3bb413ba537071113a625af<TValue>.ArgumentTypes, TypeHelper_c6eef0dad3bb413ba537071113a625af<TValue>.TypeParameters);
            return (Task<TValue>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIHttpContentApi : IHttpContentApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIHttpContentApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_90529adbf61744c5a831191f49c49161 = new Type[] { typeof(HttpContent) };

        /// <inheritdoc />
        Task<HttpContent> IHttpContentApi.PostFileUpload(HttpContent content)
        {
            var arguments = new object[] { content };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostFileUpload", ArgumentTypes_90529adbf61744c5a831191f49c49161);
            return (Task<HttpContent>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_bf6b49dbe4d540cc859aa42dbec48b03 = new Type[] { typeof(HttpContent) };

        /// <inheritdoc />
        Task<ApiResponse<HttpContent>> IHttpContentApi.PostFileUploadWithMetadata(HttpContent content)
        {
            var arguments = new object[] { content };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostFileUploadWithMetadata", ArgumentTypes_bf6b49dbe4d540cc859aa42dbec48b03);
            return (Task<ApiResponse<HttpContent>>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Net.Http.Headers;
    using global::System.Text;
    using global::System.Text.Json;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::RichardSzalay.MockHttp;
    using global::Refit;
    using global::Refit.Buffers;
    using global::Xunit;
    using JsonSerializer =  global::Newtonsoft.Json.JsonSerializer;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedResponseTestsIMyAliasService : ResponseTests.IMyAliasService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedResponseTestsIMyAliasService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_bfd0f29f7ee647f0a12cccadbbaec128 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<TestAliasObject> ResponseTests.IMyAliasService.GetTestObject()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("GetTestObject", ArgumentTypes_bfd0f29f7ee647f0a12cccadbbaec128);
            return (Task<TestAliasObject>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::RichardSzalay.MockHttp;
    using global::Refit;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedAuthenticatedClientHandlerTestsIMyAuthenticatedService : AuthenticatedClientHandlerTests.IMyAuthenticatedService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedAuthenticatedClientHandlerTestsIMyAuthenticatedService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_c0a075420a6e4527b78489be253ed77a = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string> AuthenticatedClientHandlerTests.IMyAuthenticatedService.GetUnauthenticated()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUnauthenticated", ArgumentTypes_c0a075420a6e4527b78489be253ed77a);
            return (Task<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_678b84ae204a484e8495d371603b0c0a = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string> AuthenticatedClientHandlerTests.IMyAuthenticatedService.GetAuthenticated()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("GetAuthenticated", ArgumentTypes_678b84ae204a484e8495d371603b0c0a);
            return (Task<string>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using SomeType =  global::CollisionA.SomeType;
    using global::CollisionB;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedINamespaceCollisionApi : INamespaceCollisionApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedINamespaceCollisionApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_f8be50cb813943ebaac386a4d0703e57 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<SomeType> INamespaceCollisionApi.SomeRequest()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("SomeRequest", ArgumentTypes_f8be50cb813943ebaac386a4d0703e57);
            return (Task<SomeType>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Threading.Tasks;
    using global::Common.Helper;
    using global::Refit.Tests.Common;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedINamespaceOverlapApi : INamespaceOverlapApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedINamespaceOverlapApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_b6b874d51dfe4f0d8f3cf9245aef6c46 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<SomeOtherType> INamespaceOverlapApi.SomeRequest()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("SomeRequest", ArgumentTypes_b6b874d51dfe4f0d8f3cf9245aef6c46);
            return (Task<SomeOtherType>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Linq;
    using global::System.Net.Http;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Refit;
    using static global::System.Math;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedTestNestedINestedGitHubApi : TestNested.INestedGitHubApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedTestNestedINestedGitHubApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_a430349527c64f44ac8c978c42f591c5 = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task<User> TestNested.INestedGitHubApi.GetUser(string userName)
        {
            var arguments = new object[] { userName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUser", ArgumentTypes_a430349527c64f44ac8c978c42f591c5);
            return (Task<User>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_70b62ba2e147441f81e8ef28d7247f0c = new Type[] { typeof(string) };

        /// <inheritdoc />
        IObservable<User> TestNested.INestedGitHubApi.GetUserObservable(string userName)
        {
            var arguments = new object[] { userName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUserObservable", ArgumentTypes_70b62ba2e147441f81e8ef28d7247f0c);
            return (IObservable<User>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_d08e15bc70024a99b58110ae00c5221f = new Type[] { typeof(string) };

        /// <inheritdoc />
        IObservable<User> TestNested.INestedGitHubApi.GetUserCamelCase(string userName)
        {
            var arguments = new object[] { userName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetUserCamelCase", ArgumentTypes_d08e15bc70024a99b58110ae00c5221f);
            return (IObservable<User>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_eb8a13eadc1147c487a80d9240125c75 = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task<List<User>> TestNested.INestedGitHubApi.GetOrgMembers(string orgName)
        {
            var arguments = new object[] { orgName };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetOrgMembers", ArgumentTypes_eb8a13eadc1147c487a80d9240125c75);
            return (Task<List<User>>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_6711e41af7da401ca3ff705164eb6f75 = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task<UserSearchResult> TestNested.INestedGitHubApi.FindUsers(string q)
        {
            var arguments = new object[] { q };
            var func = requestBuilder.BuildRestResultFuncForMethod("FindUsers", ArgumentTypes_6711e41af7da401ca3ff705164eb6f75);
            return (Task<UserSearchResult>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_efcf362a9a5e4bfbbe5a0a25e776d31f = Array.Empty<Type>();

        /// <inheritdoc />
        Task<HttpResponseMessage> TestNested.INestedGitHubApi.GetIndex()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("GetIndex", ArgumentTypes_efcf362a9a5e4bfbbe5a0a25e776d31f);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_7902d50b86494f45a9457bd520d1eb8d = Array.Empty<Type>();

        /// <inheritdoc />
        IObservable<string> TestNested.INestedGitHubApi.GetIndexObservable()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("GetIndexObservable", ArgumentTypes_7902d50b86494f45a9457bd520d1eb8d);
            return (IObservable<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_a4fdcecd8fa54bf1a56d17aa2a1dabd2 = Array.Empty<Type>();

        /// <inheritdoc />
        Task TestNested.INestedGitHubApi.NothingToSeeHere()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("NothingToSeeHere", ArgumentTypes_a4fdcecd8fa54bf1a56d17aa2a1dabd2);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Threading.Tasks;
    using global::Microsoft.CodeAnalysis;
    using global::Microsoft.CodeAnalysis.CSharp;
    using global::Microsoft.CodeAnalysis.CSharp.Syntax;
    using global::Refit;
    using global::Refit.Generator;
    using global::Xunit;
    using Task =  global::System.Threading.Tasks.Task;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedINonGenericInterfaceWithGenericMethod : INonGenericInterfaceWithGenericMethod
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedINonGenericInterfaceWithGenericMethod(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static class TypeHelper_b889c630279e4519b3d851c5978a5eec<T>
        {
            public static readonly Type[] ArgumentTypes = new Type[] { typeof(T) };
            public static readonly Type[] TypeParameters = new Type[] { typeof(T) };
        }

        /// <inheritdoc />
        Task INonGenericInterfaceWithGenericMethod.PostMessage<T>(T message)
        {
            var arguments = new object[] { message };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostMessage", TypeHelper_b889c630279e4519b3d851c5978a5eec<T>.ArgumentTypes, TypeHelper_b889c630279e4519b3d851c5978a5eec<T>.TypeParameters);
            return (Task)func(Client, arguments);
        }

        private static class TypeHelper_1a981ad2b8d3438fbcb9a8f209038877<T, U, V>
        {
            public static readonly Type[] ArgumentTypes = new Type[] { typeof(T), typeof(U), typeof(V) };
            public static readonly Type[] TypeParameters = new Type[] { typeof(T), typeof(U), typeof(V) };
        }

        /// <inheritdoc />
        Task INonGenericInterfaceWithGenericMethod.PostMessage<T, U, V>(T message, U param1, V param2)
        {
            var arguments = new object[] { message, param1, param2 };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostMessage", TypeHelper_1a981ad2b8d3438fbcb9a8f209038877<T, U, V>.ArgumentTypes, TypeHelper_1a981ad2b8d3438fbcb9a8f209038877<T, U, V>.TypeParameters);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedINpmJs : INpmJs
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedINpmJs(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_b5f001f47a6644b0bf731d546529b6e4 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<RootObject> INpmJs.GetCongruence()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("GetCongruence", ArgumentTypes_b5f001f47a6644b0bf731d546529b6e4);
            return (Task<RootObject>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedINullableReferenceService : INullableReferenceService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedINullableReferenceService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_45fa3b17785e4f11884f93a5cfe4b74c = Array.Empty<Type>();

        /// <inheritdoc />
        string? INullableReferenceService.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_45fa3b17785e4f11884f93a5cfe4b74c);
            return (string?)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedINullableValueService : INullableValueService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedINullableValueService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_d2dac6196fd04f76805346b266b73109 = Array.Empty<Type>();

        /// <inheritdoc />
        int? INullableValueService.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_d2dac6196fd04f76805346b266b73109);
            return (int?)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using ModelNamespace;
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIReducedUsingInsideNamespaceApi : IReducedUsingInsideNamespaceApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIReducedUsingInsideNamespaceApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_1a6e4d2b56d74525bdd83b07398ceb5d = Array.Empty<Type>();

        /// <inheritdoc />
        Task<SomeType> IReducedUsingInsideNamespaceApi.SomeRequest()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("SomeRequest", ArgumentTypes_1a6e4d2b56d74525bdd83b07398ceb5d);
            return (Task<SomeType>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIReferenceAndValueParametersService : IReferenceAndValueParametersService
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIReferenceAndValueParametersService(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_45e9ac026f114d349d9e3eb4c9821f4a = new Type[] { ToNullable(typeof(string)), ToNullable(typeof(int)) };

        /// <inheritdoc />
        Task IReferenceAndValueParametersService.Get(string? reference, int? value)
        {
            var arguments = new object[] { reference, value };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_45e9ac026f114d349d9e3eb4c9821f4a);
            return (Task)func(Client, arguments);
        }

        private static Type ToNullable(Type type) => !type.IsValueType ? type : typeof(Nullable<>).MakeGenericType(type);
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIRefitInterfaceWithStaticMethod : IRefitInterfaceWithStaticMethod
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIRefitInterfaceWithStaticMethod(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_041608a4df2545b88fa524c8ead947ee = Array.Empty<Type>();

        /// <inheritdoc />
        Task IRefitInterfaceWithStaticMethod.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_041608a4df2545b88fa524c8ead947ee);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIRequestBin : IRequestBin
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIRequestBin(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_8aae29f557ef4d9b8f36c67fce8e2ddf = Array.Empty<Type>();

        /// <inheritdoc />
        Task IRequestBin.Post()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Post", ArgumentTypes_8aae29f557ef4d9b8f36c67fce8e2ddf);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_84ba01aad0ca4a60823ecc8a277ed4f7 = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task IRequestBin.PostRawStringDefault(string str)
        {
            var arguments = new object[] { str };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostRawStringDefault", ArgumentTypes_84ba01aad0ca4a60823ecc8a277ed4f7);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_fa40c3c2926c4ab79bc510071ee5d3c4 = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task IRequestBin.PostRawStringJson(string str)
        {
            var arguments = new object[] { str };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostRawStringJson", ArgumentTypes_fa40c3c2926c4ab79bc510071ee5d3c4);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_4d1682eb1a354f13b33174f797ecdaa5 = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task IRequestBin.PostRawStringUrlEncoded(string str)
        {
            var arguments = new object[] { str };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostRawStringUrlEncoded", ArgumentTypes_4d1682eb1a354f13b33174f797ecdaa5);
            return (Task)func(Client, arguments);
        }

        private static class TypeHelper_fde5aefa86af4843a402d9f9a3b60b88<T>
        {
            public static readonly Type[] ArgumentTypes = new Type[] { typeof(T) };
            public static readonly Type[] TypeParameters = new Type[] { typeof(T) };
        }

        /// <inheritdoc />
        Task IRequestBin.PostGeneric<T>(T param)
        {
            var arguments = new object[] { param };
            var func = requestBuilder.BuildRestResultFuncForMethod("PostGeneric", TypeHelper_fde5aefa86af4843a402d9f9a3b60b88<T>.ArgumentTypes, TypeHelper_fde5aefa86af4843a402d9f9a3b60b88<T>.TypeParameters);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reflection;
    using global::System.Threading.Tasks;
    using global::Xunit;
    using global::Refit;
    using global::System.Threading;
    using global::Newtonsoft.Json;
    using global::System.Text;
    using global::System.Net.Http.Headers;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIRunscopeApi : IRunscopeApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIRunscopeApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_684d625ec98541d5a0a8be05f7d49755 = new Type[] { typeof(Stream) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadStream(Stream stream)
        {
            var arguments = new object[] { stream };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadStream", ArgumentTypes_684d625ec98541d5a0a8be05f7d49755);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_fe4cdc2b5df341948d92f7d558ca413d = new Type[] { typeof(Stream) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadStreamWithCustomBoundary(Stream stream)
        {
            var arguments = new object[] { stream };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadStreamWithCustomBoundary", ArgumentTypes_fe4cdc2b5df341948d92f7d558ca413d);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_7adfa51417ff4dec84da224f19820e73 = new Type[] { typeof(StreamPart) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadStreamPart(StreamPart stream)
        {
            var arguments = new object[] { stream };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadStreamPart", ArgumentTypes_7adfa51417ff4dec84da224f19820e73);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_fca3caac8faf4c62919761db17ec7d3a = new Type[] { typeof(ModelObject), typeof(StreamPart) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadStreamPart(ModelObject someQueryParams, StreamPart stream)
        {
            var arguments = new object[] { someQueryParams, stream };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadStreamPart", ArgumentTypes_fca3caac8faf4c62919761db17ec7d3a);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_cd1e2404075449b5be02bc5d6fc99c68 = new Type[] { typeof(byte[]) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadBytes(byte[] bytes)
        {
            var arguments = new object[] { bytes };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadBytes", ArgumentTypes_cd1e2404075449b5be02bc5d6fc99c68);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_0feafdcd26044aa3b968e6ca6f5806d4 = new Type[] { typeof(ByteArrayPart) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadBytesPart(ByteArrayPart bytes)
        {
            var arguments = new object[] { bytes };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadBytesPart", ArgumentTypes_0feafdcd26044aa3b968e6ca6f5806d4);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_d39be899581c43e296ba98f32506831e = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadString(string someString)
        {
            var arguments = new object[] { someString };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadString", ArgumentTypes_d39be899581c43e296ba98f32506831e);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_9d4f399f50f94feb85557f84d2ab1096 = new Type[] { typeof(IEnumerable<FileInfo>), typeof(FileInfo) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadFileInfo(IEnumerable<FileInfo> fileInfos, FileInfo anotherFile)
        {
            var arguments = new object[] { fileInfos, anotherFile };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadFileInfo", ArgumentTypes_9d4f399f50f94feb85557f84d2ab1096);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_c4c322984f67484291a5e8519e56bbac = new Type[] { typeof(IEnumerable<FileInfoPart>), typeof(FileInfoPart) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadFileInfoPart(IEnumerable<FileInfoPart> fileInfos, FileInfoPart anotherFile)
        {
            var arguments = new object[] { fileInfos, anotherFile };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadFileInfoPart", ArgumentTypes_c4c322984f67484291a5e8519e56bbac);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_c65c5847413e44b1a35eceff6a5bc150 = new Type[] { typeof(ModelObject) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadJsonObject(ModelObject theObject)
        {
            var arguments = new object[] { theObject };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadJsonObject", ArgumentTypes_c65c5847413e44b1a35eceff6a5bc150);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_6bb04ba2c13f49f9a6a02ca0497e7297 = new Type[] { typeof(IEnumerable<ModelObject>) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadJsonObjects(IEnumerable<ModelObject> theObjects)
        {
            var arguments = new object[] { theObjects };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadJsonObjects", ArgumentTypes_6bb04ba2c13f49f9a6a02ca0497e7297);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_de9cf24454df48c4a3f0be6f036d3148 = new Type[] { typeof(IEnumerable<ModelObject>), typeof(AnotherModel), typeof(FileInfo), typeof(AnEnum), typeof(string), typeof(int) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadMixedObjects(IEnumerable<ModelObject> theObjects, AnotherModel anotherModel, FileInfo aFile, AnEnum anEnum, string aString, int anInt)
        {
            var arguments = new object[] { theObjects, anotherModel, aFile, anEnum, aString, anInt };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadMixedObjects", ArgumentTypes_de9cf24454df48c4a3f0be6f036d3148);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_f051d362881246f28ca8f09086f0abac = new Type[] { typeof(HttpContent) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IRunscopeApi.UploadHttpContent(HttpContent content)
        {
            var arguments = new object[] { content };
            var func = requestBuilder.BuildRestResultFuncForMethod("UploadHttpContent", ArgumentTypes_f051d362881246f28ca8f09086f0abac);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }
    }
}

namespace AutoGeneratedIServiceWithoutNamespace
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIServiceWithoutNamespace : IServiceWithoutNamespace
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIServiceWithoutNamespace(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_bb0e6a7c468c4dd3a6210267d6b9cad9 = Array.Empty<Type>();

        /// <inheritdoc />
        Task IServiceWithoutNamespace.GetRoot()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("GetRoot", ArgumentTypes_bb0e6a7c468c4dd3a6210267d6b9cad9);
            return (Task)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_7f6605636b19400d94135ec4d92a0763 = Array.Empty<Type>();

        /// <inheritdoc />
        Task IServiceWithoutNamespace.PostRoot()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("PostRoot", ArgumentTypes_7f6605636b19400d94135ec4d92a0763);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIStreamApi : IStreamApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIStreamApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_a609f44b3e3c450cb19beb6de256880d = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task<Stream> IStreamApi.GetRemoteFile(string filename)
        {
            var arguments = new object[] { filename };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetRemoteFile", ArgumentTypes_a609f44b3e3c450cb19beb6de256880d);
            return (Task<Stream>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_6032b3c0af634f8e9ce7cadf6f8608b6 = new Type[] { typeof(string) };

        /// <inheritdoc />
        Task<ApiResponse<Stream>> IStreamApi.GetRemoteFileWithMetadata(string filename)
        {
            var arguments = new object[] { filename };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetRemoteFileWithMetadata", ArgumentTypes_6032b3c0af634f8e9ce7cadf6f8608b6);
            return (Task<ApiResponse<Stream>>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedITrimTrailingForwardSlashApi : ITrimTrailingForwardSlashApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedITrimTrailingForwardSlashApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_0696eae660514552a23e3fb09f8f2ca5 = Array.Empty<Type>();

        /// <inheritdoc />
        Task ITrimTrailingForwardSlashApi.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_0696eae660514552a23e3fb09f8f2ca5);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::CollisionA;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedITypeCollisionApiA : ITypeCollisionApiA
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedITypeCollisionApiA(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_3ad36489d3924039b7930d393433e92b = Array.Empty<Type>();

        /// <inheritdoc />
        Task<SomeType> ITypeCollisionApiA.SomeARequest()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("SomeARequest", ArgumentTypes_3ad36489d3924039b7930d393433e92b);
            return (Task<SomeType>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System.Threading.Tasks;
    using global::CollisionB;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedITypeCollisionApiB : ITypeCollisionApiB
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedITypeCollisionApiB(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_be5e5b598e0c42c1a71031959a2b48c5 = Array.Empty<Type>();

        /// <inheritdoc />
        Task<SomeType> ITypeCollisionApiB.SomeBRequest()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("SomeBRequest", ArgumentTypes_be5e5b598e0c42c1a71031959a2b48c5);
            return (Task<SomeType>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Threading.Tasks;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIUseOverloadedGenericMethods<TResponse, TParam, THeader>
     : IUseOverloadedGenericMethods<TResponse, TParam, THeader>
        where TResponse : class
        where THeader : struct

    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIUseOverloadedGenericMethods(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_b2e52dc636ae4b97a6dc089c5451995e = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string> IUseOverloadedGenericMethods<TResponse, TParam, THeader>.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_b2e52dc636ae4b97a6dc089c5451995e);
            return (Task<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_178ba7de1daa426992a6a41650b86c16 = new Type[] { typeof(TParam), typeof(THeader) };

        /// <inheritdoc />
        Task<TResponse> IUseOverloadedGenericMethods<TResponse, TParam, THeader>.Get(TParam param, THeader header)
        {
            var arguments = new object[] { param, header };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_178ba7de1daa426992a6a41650b86c16);
            return (Task<TResponse>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_e71df52916364e49aee7343278d40be3 = new Type[] { typeof(THeader), typeof(TParam) };

        /// <inheritdoc />
        Task<TResponse> IUseOverloadedGenericMethods<TResponse, TParam, THeader>.Get(THeader param, TParam header)
        {
            var arguments = new object[] { param, header };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_e71df52916364e49aee7343278d40be3);
            return (Task<TResponse>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_b460c9806256456287323f3a99620e54 = new Type[] { typeof(int) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IUseOverloadedGenericMethods<TResponse, TParam, THeader>.Get(int httpstatuscode)
        {
            var arguments = new object[] { httpstatuscode };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_b460c9806256456287323f3a99620e54);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }

        private static class TypeHelper_16663a294a3747d58d9f4de74773314b<TValue>
        {
            public static readonly Type[] ArgumentTypes = new Type[] { typeof(int) };
            public static readonly Type[] TypeParameters = new Type[] { typeof(TValue) };
        }

        /// <inheritdoc />
        Task<TValue> IUseOverloadedGenericMethods<TResponse, TParam, THeader>.Get<TValue>(int someVal)
        {
            var arguments = new object[] { someVal };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", TypeHelper_16663a294a3747d58d9f4de74773314b<TValue>.ArgumentTypes, TypeHelper_16663a294a3747d58d9f4de74773314b<TValue>.TypeParameters);
            return (Task<TValue>)func(Client, arguments);
        }

        private static class TypeHelper_709be579e09e4928b0846592e9755f37<TValue, TInput>
        {
            public static readonly Type[] ArgumentTypes = new Type[] { typeof(TInput) };
            public static readonly Type[] TypeParameters = new Type[] { typeof(TValue), typeof(TInput) };
        }

        /// <inheritdoc />
        Task<TValue> IUseOverloadedGenericMethods<TResponse, TParam, THeader>.Get<TValue, TInput>(TInput input)
        {
            var arguments = new object[] { input };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", TypeHelper_709be579e09e4928b0846592e9755f37<TValue, TInput>.ArgumentTypes, TypeHelper_709be579e09e4928b0846592e9755f37<TValue, TInput>.TypeParameters);
            return (Task<TValue>)func(Client, arguments);
        }

        private static class TypeHelper_bbea10926f144c5b970ee04637b14c68<TInput1, TInput2>
        {
            public static readonly Type[] ArgumentTypes = new Type[] { typeof(TInput1), typeof(TInput2) };
            public static readonly Type[] TypeParameters = new Type[] { typeof(TInput1), typeof(TInput2) };
        }

        /// <inheritdoc />
        Task IUseOverloadedGenericMethods<TResponse, TParam, THeader>.Get<TInput1, TInput2>(TInput1 input1, TInput2 input2)
        {
            var arguments = new object[] { input1, input2 };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", TypeHelper_bbea10926f144c5b970ee04637b14c68<TInput1, TInput2>.ArgumentTypes, TypeHelper_bbea10926f144c5b970ee04637b14c68<TInput1, TInput2>.TypeParameters);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Threading.Tasks;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIUseOverloadedMethods : IUseOverloadedMethods
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIUseOverloadedMethods(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_fc80a89649564f49a5686f9edd681fda = Array.Empty<Type>();

        /// <inheritdoc />
        Task<string> IUseOverloadedMethods.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_fc80a89649564f49a5686f9edd681fda);
            return (Task<string>)func(Client, arguments);
        }

        private static readonly Type[] ArgumentTypes_d44f45f888e74028b19bd19bb70b9231 = new Type[] { typeof(int) };

        /// <inheritdoc />
        Task<HttpResponseMessage> IUseOverloadedMethods.Get(int httpstatuscode)
        {
            var arguments = new object[] { httpstatuscode };
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_d44f45f888e74028b19bd19bb70b9231);
            return (Task<HttpResponseMessage>)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::System;
    using global::System.Collections.Generic;
    using global::System.IO;
    using global::System.Linq;
    using global::System.Net;
    using global::System.Net.Http;
    using global::System.Reactive.Linq;
    using global::System.Reflection;
    using global::System.Text;
    using global::System.Threading.Tasks;
    using global::Newtonsoft.Json;
    using global::Refit;
    using global::RichardSzalay.MockHttp;
    using global::Xunit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIValidApi : IValidApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIValidApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_d7658779b2ac415da648b980145d9a98 = Array.Empty<Type>();

        /// <inheritdoc />
        Task IValidApi.Get()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("Get", ArgumentTypes_d7658779b2ac415da648b980145d9a98);
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit.Tests
{
    using global::Refit.Tests.SomeNamespace;
    using global::System.Threading.Tasks;
    using global::Refit;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedNamespaceWithGlobalAliasApi : NamespaceWithGlobalAliasApi
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedNamespaceWithGlobalAliasApi(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        private static readonly Type[] ArgumentTypes_3f48c36fd66d40339da0d66d4d03c0fc = Array.Empty<Type>();

        /// <inheritdoc />
        Task<SomeType> NamespaceWithGlobalAliasApi.SomeRequest()
        {
            var arguments = Array.Empty<object>();
            var func = requestBuilder.BuildRestResultFuncForMethod("SomeRequest", ArgumentTypes_3f48c36fd66d40339da0d66d4d03c0fc);
            return (Task<SomeType>)func(Client, arguments);
        }
    }
}

#pragma warning restore CS8632 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context.
#pragma warning restore CS8669 // The annotation for nullable reference types should only be used in code within a '#nullable' annotations context. Auto-generated code requires an explicit '#nullable' directive in source.
